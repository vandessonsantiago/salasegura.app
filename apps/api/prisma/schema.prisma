generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id
  email      String        @unique
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  name       String?
  avatar_url String?
  phone      String?
  profile    UserProfile?
  sessions   UserSession[]
  checklistSessions ChecklistSession[]
  agendamentos Agendamento[]

  @@map("users")
}

model UserProfile {
  id         String   @id @default(uuid())
  user_id    String   @unique
  bio        String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  company    String?
  language   String?  @default("pt-BR")
  location   String?
  theme      String?  @default("light")
  timezone   String?  @default("America/Sao_Paulo")
  website    String?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserSession {
  id         String    @id @default(uuid())
  user_id    String
  ip_address String?
  user_agent String?
  expires_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model ActivityLog {
  id         String   @id @default(uuid())
  user_id    String?
  action     String
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())

  @@map("activity_logs")
}

model AppSettings {
  id         String   @id @default(uuid())
  key        String   @unique
  value      String
  type       String   @default("string")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("app_settings")
}

model Conversion {
  id           String   @id @default(uuid())
  name         String
  email        String
  whatsapp     String
  access_token String   @unique
  status       String   @default("pending")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("conversions")
}

// -------------------------------------------------------------
// Checklist Session & Items
// -------------------------------------------------------------
model ChecklistSession {
  id           String           @id @default(uuid())
  user_id      String
  title        String
  progress     Int              @default(0)
  total_items  Int              @default(0)
  template_version Int          @default(1)
  completed_at DateTime?
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  items        ChecklistItem[]
  user         User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("checklist_sessions")
}

model ChecklistItem {
  id         String           @id @default(uuid())
  session_id String
  item_id    String           // Identificador lógico "1.1" etc.
  category   String
  text       String
  checked    Boolean          @default(false)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  session    ChecklistSession @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@unique([session_id, item_id])
  @@index([session_id])
  @@map("checklist_items")
}

// -------------------------------------------------------------
// Agendamentos
// -------------------------------------------------------------
model Agendamento {
  id                 String   @id @default(uuid())
  user_id           String
  data              String   // Data no formato YYYY-MM-DD
  horario           String   // Horário no formato HH:mm
  status            String   @default("PENDING")
  payment_id        String
  payment_status    String   @default("PENDING")
  valor             Float
  descricao         String
  cliente_nome      String
  cliente_email     String
  cliente_telefone  String
  qr_code_pix       String?
  copy_paste_pix    String?
  pix_expires_at    String?
  calendar_event_id String?
  google_meet_link  String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([data, horario])
  @@map("agendamentos")
}
