import { Request, Response } from 'express';
import axios from 'axios';
import { z } from 'zod';
import { supabaseAdmin as supabase } from '../lib/supabase';
import { AgendamentoService, AgendamentoData } from './AgendamentoService';

// Tipo para request autenticado
type AuthenticatedRequest = Request & {
  user?: {
    id: string;
    email: string;
  };
};

// Interface para dados do cliente
export interface ClienteData {
  name: string;
  email: string;
  cpfCnpj: string;
  phone: string;
}

// Interface para dados do checkout
export interface CheckoutData {
  cliente: ClienteData;
  valor: number;
  descricao: string;
  serviceType: string;
  serviceData?: any;
  data?: string;
  horario?: string;
}

// Interface para resposta do checkout
export interface CheckoutResponse {
  success: boolean;
  agendamentoId?: string;
  paymentId?: string;
  qrCodePix?: string;
  copyPastePix?: string;
  pixExpiresAt?: string;
  error?: string;
}

export class CheckoutService {
  private static readonly ASAAS_CONFIG = {
    BASE_URL: "https://api-sandbox.asaas.com/v3",
    API_KEY: process.env.ASAAS_API_KEY || "",
  };

  /**
   * M√©todo principal que roteia baseado no serviceType
   */
  static async processarCheckoutCompleto(
    req: AuthenticatedRequest,
    checkoutData: CheckoutData
  ): Promise<CheckoutResponse> {
    // Roteamento baseado no tipo de servi√ßo
    if (checkoutData.serviceType === 'divorcio') {
      return this.processarCheckoutDivorcio(req, checkoutData);
    } else {
      return this.processarCheckoutAgendamento(req, checkoutData);
    }
  }

  /**
   * Processa checkout espec√≠fico para div√≥rcios
   */
  private static async processarCheckoutDivorcio(
    req: AuthenticatedRequest,
    checkoutData: CheckoutData
  ): Promise<CheckoutResponse> {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return { success: false, error: 'Usu√°rio n√£o autenticado' };
      }

      console.log('üöÄ [DIVORCE-CHECKOUT] Iniciando processo de checkout para div√≥rcio');
      console.log('üìä [DIVORCE-CHECKOUT] Dados recebidos:', {
        userId,
        serviceType: checkoutData.serviceType,
        valor: checkoutData.valor
      });

      // PASSO 1: Criar caso de div√≥rcio na tabela divorce_cases
      console.log('üèóÔ∏è [DIVORCE-CHECKOUT] Passo 1: Criando caso de div√≥rcio...');
      const caseId = this.generateUUID();

      const divorceData = {
        id: caseId,
        user_id: userId,
        type: 'express',
        status: 'pending_payment',
        valor: checkoutData.valor,
        cliente_nome: checkoutData.cliente.name,
        cliente_email: checkoutData.cliente.email,
        cliente_telefone: checkoutData.cliente.phone,
        service_data: checkoutData.serviceData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };

      const { data: divorceResult, error: divorceError } = await supabase
        .from('divorce_cases')
        .insert([divorceData])
        .select()
        .single();

      if (divorceError) {
        console.error('‚ùå [DIVORCE-CHECKOUT] Falha ao criar caso de div√≥rcio:', divorceError);
        return { success: false, error: divorceError.message };
      }

      console.log('‚úÖ [DIVORCE-CHECKOUT] Caso de div√≥rcio criado:', caseId);

      // PASSO 2: Processar pagamento no Asaas
      console.log('üí≥ [DIVORCE-CHECKOUT] Passo 2: Processando pagamento no Asaas...');
      const pagamentoResult = await this.processarPagamentoAsaas(
        checkoutData.cliente,
        checkoutData.valor,
        checkoutData.descricao,
        caseId
      );

      if (!pagamentoResult.success) {
        console.error('‚ùå [DIVORCE-CHECKOUT] Falha ao processar pagamento:', pagamentoResult.error);
        return { success: false, error: pagamentoResult.error || 'Erro ao processar pagamento' };
      }

      // PASSO 3: Atualizar caso com dados do PIX
      console.log('üîÑ [DIVORCE-CHECKOUT] Passo 3: Atualizando caso com dados do PIX...');
      const { error: pixError } = await supabase
        .from('divorce_cases')
        .update({
          payment_id: pagamentoResult.paymentId,
          qr_code_pix: pagamentoResult.qrCodePix,
          copy_paste_pix: pagamentoResult.copyPastePix,
          pix_expires_at: pagamentoResult.pixExpiresAt,
          updated_at: new Date().toISOString(),
        })
        .eq('id', caseId);

      if (pixError) {
        console.error('‚ùå [DIVORCE-CHECKOUT] Falha ao atualizar dados do PIX:', pixError);
        return { success: false, error: pixError.message };
      }

      console.log('‚úÖ [DIVORCE-CHECKOUT] Processo de checkout para div√≥rcio conclu√≠do com sucesso!');

      return {
        success: true,
        agendamentoId: caseId, // Mant√©m compatibilidade com interface existente
        paymentId: pagamentoResult.paymentId,
        qrCodePix: pagamentoResult.qrCodePix,
        copyPastePix: pagamentoResult.copyPastePix,
        pixExpiresAt: pagamentoResult.pixExpiresAt,
      };

    } catch (error) {
      console.error('‚ùå [DIVORCE-CHECKOUT] Erro inesperado:', error);
      return { success: false, error: 'Erro interno do servidor' };
    }
  }

  /**
   * Processo consolidado de checkout para agendamentos:
   * 1. Criar agendamento b√°sico
   * 2. Atualizar com dados do cliente
   * 3. Processar pagamento no Asaas
   * 4. Atualizar agendamento com dados do PIX
   */
  private static async processarCheckoutAgendamento(
    req: AuthenticatedRequest,
    checkoutData: CheckoutData
  ): Promise<CheckoutResponse> {
      const userId = req.user?.id;
      if (!userId) {
        return { success: false, error: 'Usu√°rio n√£o autenticado' };
      }

      console.log('üöÄ [CHECKOUT] Iniciando processo consolidado de checkout');
      console.log('üìä [CHECKOUT] Dados recebidos:', {
        userId,
        serviceType: checkoutData.serviceType,
        valor: checkoutData.valor
      });

      // PASSO 1: Criar agendamento b√°sico
      console.log('üèóÔ∏è [CHECKOUT] Passo 1: Criando agendamento b√°sico...');
      console.log('üìä [CHECKOUT] Dados para agendamento:', {
        userId,
        serviceType: checkoutData.serviceType,
        valor: checkoutData.valor,
        descricao: checkoutData.descricao
      });

      const agendamentoResult = await AgendamentoService.criarAgendamentoBasico(
        userId,
        checkoutData.serviceType,
        checkoutData.valor,
        checkoutData.descricao,
        checkoutData.serviceData,
        checkoutData.data,
        checkoutData.horario
      );

      console.log('üîç [CHECKOUT] Resultado da cria√ß√£o do agendamento:', {
        success: agendamentoResult.success,
        hasAgendamento: !!agendamentoResult.agendamento,
        agendamentoId: agendamentoResult.agendamento?.id,
        error: agendamentoResult.error
      });

      if (!agendamentoResult.success || !agendamentoResult.agendamento) {
        console.error('‚ùå [CHECKOUT] Falha ao criar agendamento b√°sico:', agendamentoResult.error);
        console.error('‚ùå [CHECKOUT] Detalhes do erro:', {
          success: agendamentoResult.success,
          hasAgendamento: !!agendamentoResult.agendamento,
          error: agendamentoResult.error
        });
        return { success: false, error: agendamentoResult.error || 'Erro ao criar agendamento' };
      }

      const agendamentoId = agendamentoResult.agendamento.id!;
      console.log('‚úÖ [CHECKOUT] Agendamento b√°sico criado:', agendamentoId);
      console.log('üìã [CHECKOUT] Agendamento completo:', agendamentoResult.agendamento);

      // PASSO 2: Atualizar agendamento com data e hor√°rio (se fornecidos)
      if (checkoutData.data && checkoutData.horario) {
        console.log('üìÖ [CHECKOUT] Passo 2: Atualizando com data e hor√°rio...');
        const dataHorarioUpdateResult = await AgendamentoService.atualizarComDataHorario(
          agendamentoId,
          {
            data: checkoutData.data,
            horario: checkoutData.horario,
          }
        );

        if (!dataHorarioUpdateResult.success) {
          console.error('‚ùå [CHECKOUT] Falha ao atualizar data e hor√°rio:', dataHorarioUpdateResult.error);
          return { success: false, error: dataHorarioUpdateResult.error || 'Erro ao atualizar data e hor√°rio' };
        }

        console.log('‚úÖ [CHECKOUT] Data e hor√°rio atualizados');
      } else {
        console.log('‚ö†Ô∏è [CHECKOUT] Data e hor√°rio n√£o fornecidos, pulando atualiza√ß√£o');
      }

      // PASSO 3: Atualizar agendamento com dados do cliente
      console.log('üìù [CHECKOUT] Passo 3: Atualizando com dados do cliente...');
      const clienteUpdateResult = await AgendamentoService.atualizarComDadosCliente(
        agendamentoId,
        {
          nome: checkoutData.cliente.name,
          email: checkoutData.cliente.email,
          telefone: checkoutData.cliente.phone,
        }
      );

      if (!clienteUpdateResult.success) {
        console.error('‚ùå [CHECKOUT] Falha ao atualizar dados do cliente:', clienteUpdateResult.error);
        return { success: false, error: clienteUpdateResult.error || 'Erro ao atualizar dados do cliente' };
      }

      console.log('‚úÖ [CHECKOUT] Dados do cliente atualizados');

      // PASSO 4: Processar pagamento no Asaas
      console.log('üí≥ [CHECKOUT] Passo 4: Processando pagamento no Asaas...');
      const pagamentoResult = await this.processarPagamentoAsaas(
        checkoutData.cliente,
        checkoutData.valor,
        checkoutData.descricao,
        agendamentoId
      );

      if (!pagamentoResult.success) {
        console.error('‚ùå [CHECKOUT] Falha ao processar pagamento:', pagamentoResult.error);
        return { success: false, error: pagamentoResult.error || 'Erro ao processar pagamento' };
      }

      // PASSO 5: Atualizar agendamento com dados do PIX
      console.log('üîÑ [CHECKOUT] Passo 5: Atualizando agendamento com dados do PIX...');
      const pixUpdateResult = await AgendamentoService.atualizarComDadosPagamento(
        agendamentoId,
        {
          paymentId: pagamentoResult.paymentId!,
          paymentStatus: 'PENDING',
          qrCodePix: pagamentoResult.qrCodePix!,
          copyPastePix: pagamentoResult.copyPastePix!,
          pixExpiresAt: pagamentoResult.pixExpiresAt!,
        }
      );

      if (!pixUpdateResult.success) {
        console.error('‚ùå [CHECKOUT] Falha ao atualizar dados do PIX:', pixUpdateResult.error);
        return { success: false, error: pixUpdateResult.error || 'Erro ao atualizar dados do PIX' };
      }

      console.log('‚úÖ [CHECKOUT] Processo consolidado conclu√≠do com sucesso!');

      return {
        success: true,
        agendamentoId,
        paymentId: pagamentoResult.paymentId,
        qrCodePix: pagamentoResult.qrCodePix,
        copyPastePix: pagamentoResult.copyPastePix,
        pixExpiresAt: pagamentoResult.pixExpiresAt,
      };

    } catch (error) {
      console.error('‚ùå [CHECKOUT] Erro inesperado no processo consolidado:', error);
      return { success: false, error: 'Erro interno do servidor' };
    }
  }

  /**
   * Processa o pagamento no Asaas e obt√©m dados do PIX
   */
  /**
   * M√©todo p√∫blico para processar pagamento (usado por servi√ßos especializados)
   */
  static async processarPagamento(
    cliente: ClienteData,
    valor: number,
    descricao: string,
    referenceId: string
  ): Promise<{
    success: boolean;
    paymentId?: string;
    qrCodePix?: string;
    copyPastePix?: string;
    pixExpiresAt?: string;
    error?: string;
  }> {
    return this.processarPagamentoAsaas(cliente, valor, descricao, referenceId);
  }

  private static async processarPagamentoAsaas(
    cliente: ClienteData,
    valor: number,
    descricao: string,
    agendamentoId: string
  ): Promise<{
    success: boolean;
    paymentId?: string;
    qrCodePix?: string;
    copyPastePix?: string;
    pixExpiresAt?: string;
    error?: string;
  }> {
    try {
      // 1. Buscar ou criar cliente no Asaas
      console.log('üîç [ASAAS] Buscando cliente por CPF:', cliente.cpfCnpj);
      const customerResult = await this.buscarOuCriarClienteAsaas(cliente);

      if (!customerResult.success || !customerResult.customerId) {
        return { success: false, error: customerResult.error || 'Erro ao processar cliente' };
      }

      // 2. Criar pagamento no Asaas
      console.log('üí∞ [ASAAS] Criando pagamento...');
      const paymentResult = await this.criarPagamentoAsaas(
        customerResult.customerId,
        valor,
        descricao,
        agendamentoId
      );

      if (!paymentResult.success) {
        return { success: false, error: paymentResult.error || 'Erro ao criar pagamento' };
      }

      // 3. Obter QR Code PIX
      console.log('üì± [ASAAS] Obtendo QR Code PIX...');
      const pixResult = await this.obterQrCodePix(paymentResult.paymentId!);

      if (!pixResult.success) {
        return { success: false, error: pixResult.error || 'Erro ao obter QR Code PIX' };
      }

      return {
        success: true,
        paymentId: paymentResult.paymentId,
        qrCodePix: pixResult.qrCodePix,
        copyPastePix: pixResult.copyPastePix,
        pixExpiresAt: pixResult.pixExpiresAt,
      };

    } catch (error) {
      console.error('‚ùå [ASAAS] Erro inesperado:', error);
      return { success: false, error: 'Erro interno do servidor' };
    }
  }

  /**
   * Busca ou cria cliente no Asaas
   */
  private static async buscarOuCriarClienteAsaas(
    cliente: ClienteData
  ): Promise<{ success: boolean; customerId?: string; error?: string }> {
    try {
      // Buscar cliente existente
      const searchResponse = await axios.get(
        `${this.ASAAS_CONFIG.BASE_URL}/customers`,
        {
          params: { cpfCnpj: cliente.cpfCnpj },
          headers: {
            'Content-Type': 'application/json',
            'access_token': this.ASAAS_CONFIG.API_KEY,
          },
        }
      );

      if (searchResponse.data.data && searchResponse.data.data.length > 0) {
        const existingCustomer = searchResponse.data.data[0];
        console.log('‚úÖ [ASAAS] Cliente existente encontrado:', existingCustomer.id);
        return { success: true, customerId: existingCustomer.id };
      }

      // Criar novo cliente
      const createResponse = await axios.post(
        `${this.ASAAS_CONFIG.BASE_URL}/customers`,
        {
          name: cliente.name,
          email: cliente.email,
          cpfCnpj: cliente.cpfCnpj,
          phone: cliente.phone,
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'access_token': this.ASAAS_CONFIG.API_KEY,
          },
        }
      );

      console.log('‚úÖ [ASAAS] Novo cliente criado:', createResponse.data.id);
      return { success: true, customerId: createResponse.data.id };

    } catch (error: any) {
      console.error('‚ùå [ASAAS] Erro ao buscar/criar cliente:', error.response?.data || error.message);
      return { success: false, error: 'Erro ao processar cliente no Asaas' };
    }
  }

  /**
   * Cria pagamento no Asaas
   */
  private static async criarPagamentoAsaas(
    customerId: string,
    valor: number,
    descricao: string,
    agendamentoId: string
  ): Promise<{ success: boolean; paymentId?: string; error?: string }> {
    try {
      const dueDate = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().slice(0, 10);

      const paymentPayload = {
        customer: customerId,
        billingType: 'PIX',
        value: valor,
        dueDate: dueDate,
        description: descricao,
        externalReference: agendamentoId,
      };

      const response = await axios.post(
        `${this.ASAAS_CONFIG.BASE_URL}/payments`,
        paymentPayload,
        {
          headers: {
            'Content-Type': 'application/json',
            'access_token': this.ASAAS_CONFIG.API_KEY,
          },
        }
      );

      console.log('‚úÖ [ASAAS] Pagamento criado:', response.data.id);
      return { success: true, paymentId: response.data.id };

    } catch (error: any) {
      console.error('‚ùå [ASAAS] Erro ao criar pagamento:', error.response?.data || error.message);
      return { success: false, error: 'Erro ao criar pagamento no Asaas' };
    }
  }

  /**
   * Obt√©m QR Code PIX
   */
  private static async obterQrCodePix(
    paymentId: string
  ): Promise<{
    success: boolean;
    qrCodePix?: string;
    copyPastePix?: string;
    pixExpiresAt?: string;
    error?: string;
  }> {
    try {
      const response = await axios.get(
        `${this.ASAAS_CONFIG.BASE_URL}/payments/${paymentId}/pixQrCode`,
        {
          headers: {
            'Content-Type': 'application/json',
            'access_token': this.ASAAS_CONFIG.API_KEY,
          },
        }
      );

      if (response.data.success) {
        console.log('‚úÖ [ASAAS] QR Code PIX obtido com sucesso');
        return {
          success: true,
          qrCodePix: response.data.encodedImage,
          copyPastePix: response.data.payload,
          pixExpiresAt: response.data.expirationDate,
        };
      } else {
        return { success: false, error: 'Falha ao obter QR Code PIX' };
      }

    } catch (error: any) {
      console.error('‚ùå [ASAAS] Erro ao obter QR Code PIX:', error.response?.data || error.message);
      return { success: false, error: 'Erro ao obter QR Code PIX' };
    }
  }
}
