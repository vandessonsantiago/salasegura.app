const express = require("express")
import OpenAI from "openai"

const router = express.Router()

// Configurar OpenAI
console.log(
  "üîë OpenAI API Key:",
  process.env.OPENAI_API_KEY ? "Configurada" : "N√ÉO CONFIGURADA"
)
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

interface ChatMessage {
  id: string
  type: "user" | "assistant"
  content: string
  timestamp: Date
}

interface ChatRequest {
  message: string
  chatHistory: ChatMessage[]
}

interface ConversionData {
  shouldConvert: boolean
  contactData: {
    email: string
    whatsapp: string
  }
  timestamp?: string
}

// Sistema de contexto para o advogado
const systemPromptPt = `Voc√™ √© o advogado Vandesson Santiago, especialista em Direito de Fam√≠lia.

CREDENCIAIS: OAB/AM 12.217 - OA/PT 64171P

REGRAS FUNDAMENTAIS:
1. Mantenha tom calmo, respeitoso e emp√°tico
2. Use vocabul√°rio simples, evitando juridiqu√™s
3. NUNCA incentive separa√ß√£o; atenda apenas quem j√° decidiu
4. N√ÉO tome partido nem fa√ßa julgamentos morais
5. Trate todas as informa√ß√µes como confidenciais
6. N√ÉO mencione M√©todo Novo Pacto ou Sala Segura no primeiro contato

SENSIBILIDADE E EMPATIA:
- NUNCA comemore, celebre ou demonstre alegria pela decis√£o de separa√ß√£o
- NUNCA use frases como "√≥timo", "perfeito", "fico feliz" em rela√ß√£o ao div√≥rcio
- SEMPRE demonstre compreens√£o e respeito pela complexidade emocional do momento
- Use linguagem neutra e profissional, mas acolhedora
- Reconhe√ßa que este √© um momento dif√≠cil e delicado
- Ofere√ßa apoio e orienta√ß√£o de forma respeitosa

PRIMEIRA INTERA√á√ÉO (ACOLHIMENTO):
- Cumprimente de forma acolhedora
- Confirme que entende que a decis√£o j√° foi tomada
- Fa√ßa apenas 2 perguntas essenciais:
  * Tipo de v√≠nculo (casamento ou uni√£o est√°vel)
  * Se h√° filhos menores envolvidos
- N√ÉO pergunte cidade/estado (direito √© o mesmo em todo Brasil)
- N√ÉO mencione m√©todos, plataformas ou servi√ßos
- Foque apenas em acolher e entender a situa√ß√£o b√°sica

SEGUNDA INTERA√á√ÉO (APRESENTA√á√ÉO DA SALA SEGURA):
- Agrade√ßa pelas informa√ß√µes compartilhadas
- Confirme que entende a situa√ß√£o (especialmente se h√° filhos menores)
- SEMPRE apresente a Sala Segura como solu√ß√£o natural:
  * "Para ajud√°-lo de forma mais organizada, temos a Sala Segura"
  * "√â um espa√ßo onde voc√™ pode organizar todo o processo"
  * "Inclui checklist, documentos, acordos e acompanhamento"
  * "O acesso √© gratuito e voc√™ s√≥ paga pelos servi√ßos que precisar"
- SEMPRE direcione para o formul√°rio de acesso
- N√ÉO pergunte "como voc√™ prefere seguir" - seja direto

PERGUNTAS PERMITIDAS:
- Tipo de v√≠nculo (casamento/uni√£o est√°vel)
- Exist√™ncia de filhos menores

PERGUNTAS PROIBIDAS:
- Motivo da separa√ß√£o
- Julgamentos morais
- Quest√µes que incentivem conflito
- Cidade e estado de resid√™ncia
- Mencionar M√©todo Novo Pacto ou Sala Segura

RESPONDA de forma acolhedora e profissional, sem mencionar produtos ou servi√ßos no primeiro contato.`

/**
 * Detectar inten√ß√£o de convers√£o baseada na mensagem e hist√≥rico
 */
function detectConversionIntent(
  message: string,
  chatHistory: ChatMessage[]
): ConversionData {
  console.log("üîç Debug detectConversionIntent:", {
    message,
    chatHistoryLength: chatHistory.length,
    chatHistory: chatHistory.map((msg) => ({
      type: msg.type,
      content: msg.content.substring(0, 50),
    })),
  })

  // Se √© a primeira mensagem, N√ÉO detectar convers√£o
  if (chatHistory.length === 0) {
    console.log("‚ùå Primeira mensagem - n√£o detectar convers√£o")
    return {
      shouldConvert: false,
      contactData: { email: "", whatsapp: "" },
    }
  }

  // Se √© a segunda intera√ß√£o (ap√≥s o usu√°rio responder as perguntas iniciais),
  // ativar convers√£o automaticamente
  if (chatHistory.length >= 1) {
    console.log(
      "‚úÖ Segunda intera√ß√£o ou mais - ativar convers√£o automaticamente"
    )
    return {
      shouldConvert: true,
      contactData: { email: "", whatsapp: "" },
      timestamp: new Date().toISOString(),
    }
  }

  const conversionKeywords = [
    "sala segura",
    "acesso",
    "link",
    "plataforma",
    "m√©todo",
    "novo pacto",
    "quero come√ßar",
    "vamos come√ßar",
    "iniciar o processo",
    "come√ßar o processo",
    "quero agora",
    "j√° estou pronto",
    "pronto para come√ßar",
    "concordo",
    "aceito",
    "quero avan√ßar",
    "formulario",
    "formul√°rio",
    "ir para",
    "onde",
    "quanto custa",
    "valor",
    "pre√ßo",
    "custo",
    "gratuito",
    "gratis",
    "quanto tempo",
    "prazo",
    "quando",
    "pr√≥ximo passo",
    "como fazer",
    "safe room",
    "access",
    "platform",
    "method",
    "new covenant",
    "want to start",
    "let's start",
    "start the process",
    "begin the process",
    "want now",
    "ready to start",
    "ready now",
    "agree",
    "accept",
    "want to proceed",
    "form",
    "go to",
    "where",
    "how much",
    "cost",
    "price",
    "free",
    "how long",
    "deadline",
    "when",
    "next step",
    "how to",
  ]

  const messageLower = message.toLowerCase()
  const matchedKeywords = conversionKeywords.filter((keyword) =>
    messageLower.includes(keyword)
  )

  const result = matchedKeywords.length > 0 && chatHistory.length >= 1
  console.log("üîç Resultado detec√ß√£o:", { matchedKeywords, result })

  return {
    shouldConvert: result,
    contactData: { email: "", whatsapp: "" },
    timestamp: result ? new Date().toISOString() : undefined,
  }
}

/**
 * Extrair dados de contato da mensagem
 */
function extractContactData(message: string): {
  email: string
  whatsapp: string
} {
  const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/
  const whatsappRegex = /(\+55\s?)?(\d{2}\s?)?(\d{4,5}\s?)?(\d{4})/

  const email = message.match(emailRegex)?.[0] || ""
  const whatsapp = message.match(whatsappRegex)?.[0] || ""

  return { email, whatsapp }
}

/**
 * Construir mensagens para o OpenAI
 */
function buildMessages(request: ChatRequest): any[] {
  const systemPrompt = systemPromptPt

  const messages: any[] = [
    {
      role: "system",
      content: systemPrompt,
    },
  ]

  // Adicionar hist√≥rico de conversa
  request.chatHistory.forEach((msg) => {
    messages.push({
      role: msg.type === "user" ? "user" : "assistant",
      content: msg.content,
    })
  })

  // Adicionar mensagem atual
  messages.push({
    role: "user",
    content: request.message,
  })

  return messages
}

/**
 * Gerar resposta contextualizada baseada nas informa√ß√µes do usu√°rio
 */
function generateContextualResponse(
  message: string,
  chatHistory: ChatMessage[]
): string {
  console.log("üîç Debug generateContextualResponse:", {
    message,
    chatHistoryLength: chatHistory.length,
    chatHistory: chatHistory.map((msg) => ({
      type: msg.type,
      content: msg.content,
    })),
  })

  // Analisar o hist√≥rico para entender o contexto
  const hasChildren = chatHistory.some(
    (msg) =>
      msg.content.toLowerCase().includes("filhos") ||
      msg.content.toLowerCase().includes("crian√ßas") ||
      msg.content.toLowerCase().includes("menores")
  )

  const hasNoChildren = chatHistory.some(
    (msg) =>
      msg.content.toLowerCase().includes("sem filhos") ||
      msg.content.toLowerCase().includes("n√£o tem filhos") ||
      msg.content.toLowerCase().includes("sem crian√ßas")
  )

  const isMarriage = chatHistory.some(
    (msg) =>
      msg.content.toLowerCase().includes("casamento") ||
      msg.content.toLowerCase().includes("casados")
  )

  const isUnion = chatHistory.some(
    (msg) =>
      msg.content.toLowerCase().includes("uni√£o est√°vel") ||
      msg.content.toLowerCase().includes("uniao estavel")
  )

  console.log("üîç An√°lise de contexto:", {
    hasChildren,
    hasNoChildren,
    isMarriage,
    isUnion,
  })

  // Gerar resposta contextualizada
  let contextualPart = ""

  if (hasChildren || hasNoChildren) {
    if (hasNoChildren) {
      contextualPart =
        "Entendo que essa situa√ß√£o pode ser complexa mesmo sem filhos envolvidos."
    } else {
      contextualPart =
        "Sei que lidar com essa situa√ß√£o, especialmente quando h√° filhos menores envolvidos, pode ser desafiador e trazer muitas preocupa√ß√µes emocionais e pr√°ticas."
    }
  } else {
    contextualPart =
      "Entendo que essa situa√ß√£o pode ser complexa e trazer muitas preocupa√ß√µes emocionais."
  }

  console.log("üîç ContextualPart escolhida:", contextualPart)

  return `Agrade√ßo pelas informa√ß√µes que voc√™ compartilhou. ${contextualPart}

Para tornar esse momento mais organizado e seguro, nosso escrit√≥rio desenvolveu a Sala Segura: um espa√ßo digital pensado para acompanhar cada etapa do processo de div√≥rcio e reorganiza√ß√£o familiar. Nela, voc√™ encontrar√°:

Checklists pr√°ticos para n√£o esquecer nenhum detalhe;

Armazenamento protegido de documentos;

Modelos e apoio na elabora√ß√£o de acordos;

Acompanhamento claro de todas as fases, seja judicial ou extrajudicial.

O acesso √© totalmente gratuito, e voc√™ s√≥ paga pelos servi√ßos jur√≠dicos que realmente precisar.

Para come√ßar, basta preencher o formul√°rio que aparecer√° em seguida. Logo depois, voc√™ ser√° direcionado para criar sua senha e entrar na Sala Segura. A partir da√≠, poder√° explorar os recursos dispon√≠veis com tranquilidade ‚Äî e estarei ao seu lado para esclarecer d√∫vidas sempre que necess√°rio.`
}

/**
 * POST /api/v1/chat - Processar mensagem do chat
 */
router.post("/", async (req, res) => {
  try {
    const { message, chatHistory = [] }: ChatRequest = req.body

    console.log("üìù Recebida mensagem:", {
      message,
      chatHistoryLength: chatHistory.length,
    })

    // Verificar se a chave da API est√° configurada
    if (!process.env.OPENAI_API_KEY) {
      throw new Error("Chave da API OpenAI n√£o configurada")
    }

    // Detectar inten√ß√£o de convers√£o
    const shouldConvert = detectConversionIntent(message, chatHistory)
    const contactData = extractContactData(message)

    console.log("üîç Detec√ß√£o de convers√£o:", {
      shouldConvert,
      contactData,
      message: message,
      chatHistoryLength: chatHistory.length,
      chatHistory: chatHistory.map((msg: any) => ({
        type: msg.type,
        content: msg.content.substring(0, 50),
      })),
    })

    // Construir mensagens para OpenAI
    const messages = buildMessages({ message, chatHistory })

    console.log("ü§ñ Chamando OpenAI...")

    // Chamar API da OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: messages,
      max_tokens: 400,
      temperature: 0.6,
    })

    let finalResponse =
      completion.choices[0]?.message?.content ||
      "Desculpe, n√£o consegui processar sua mensagem."

    console.log(
      "‚úÖ Resposta da OpenAI:",
      finalResponse.substring(0, 100) + "..."
    )

    // Se detectou convers√£o, usar resposta espec√≠fica sobre a Sala Segura
    if (shouldConvert.shouldConvert) {
      console.log("üéØ Usando generateContextualResponse")

      // Verificar se menciona "sem filhos"
      const mentionsNoChildren =
        message.toLowerCase().includes("sem filhos") ||
        message.toLowerCase().includes("n√£o tem filhos") ||
        chatHistory.some((msg) =>
          msg.content.toLowerCase().includes("sem filhos")
        )

      if (mentionsNoChildren) {
        finalResponse = `Agrade√ßo pelas informa√ß√µes que voc√™ compartilhou. Entendo que essa situa√ß√£o pode ser complexa mesmo sem filhos envolvidos.

Para tornar esse momento mais organizado e seguro, nosso escrit√≥rio desenvolveu a Sala Segura: um espa√ßo digital pensado para acompanhar cada etapa do processo de div√≥rcio e reorganiza√ß√£o familiar. Nela, voc√™ encontrar√°:

Checklists pr√°ticos para n√£o esquecer nenhum detalhe;

Armazenamento protegido de documentos;

Modelos e apoio na elabora√ß√£o de acordos;

Acompanhamento claro de todas as fases, seja judicial ou extrajudicial.

O acesso √© totalmente gratuito, e voc√™ s√≥ paga pelos servi√ßos jur√≠dicos que realmente precisar.

Para come√ßar, basta preencher o formul√°rio que aparecer√° em seguida. Logo depois, voc√™ ser√° direcionado para criar sua senha e entrar na Sala Segura. A partir da√≠, poder√° explorar os recursos dispon√≠veis com tranquilidade ‚Äî e estarei ao seu lado para esclarecer d√∫vidas sempre que necess√°rio.`
      } else {
        finalResponse = `Agrade√ßo pelas informa√ß√µes que voc√™ compartilhou. Sei que lidar com essa situa√ß√£o, especialmente quando h√° filhos menores envolvidos, pode ser desafiador e trazer muitas preocupa√ß√µes emocionais e pr√°ticas.

Para tornar esse momento mais organizado e seguro, nosso escrit√≥rio desenvolveu a Sala Segura: um espa√ßo digital pensado para acompanhar cada etapa do processo de div√≥rcio e reorganiza√ß√£o familiar. Nela, voc√™ encontrar√°:

Checklists pr√°ticos para n√£o esquecer nenhum detalhe;

Armazenamento protegido de documentos;

Modelos e apoio na elabora√ß√£o de acordos;

Acompanhamento claro de todas as fases, seja judicial ou extrajudicial.

O acesso √© totalmente gratuito, e voc√™ s√≥ paga pelos servi√ßos jur√≠dicos que realmente precisar.

Para come√ßar, basta preencher o formul√°rio que aparecer√° em seguida. Logo depois, voc√™ ser√° direcionado para criar sua senha e entrar na Sala Segura. A partir da√≠, poder√° explorar os recursos dispon√≠veis com tranquilidade ‚Äî e estarei ao seu lado para esclarecer d√∫vidas sempre que necess√°rio.`
      }

      console.log("‚úÖ Resposta contextualizada gerada")
    } else {
      console.log("‚ùå N√£o detectou convers√£o, usando resposta da OpenAI")
    }

    const responseData = {
      response: finalResponse,
      usage: completion.usage,
      conversionData: shouldConvert.shouldConvert
        ? {
            shouldConvert: true,
            contactData,
            timestamp: new Date().toISOString(),
          }
        : null,
    }

    console.log("üì§ Enviando resposta:", {
      responseLength: finalResponse.length,
      shouldConvert: shouldConvert.shouldConvert,
      usage: completion.usage,
    })

    res.json(responseData)
  } catch (error) {
    console.error("‚ùå Erro na API:", error)

    res.status(500).json({
      response:
        "Desculpe, estou enfrentando uma dificuldade t√©cnica no momento. Por favor, tente novamente em alguns instantes.",
      usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 },
      conversionData: null,
      error: error instanceof Error ? error.message : "Erro desconhecido",
    })
  }
})

/**
 * GET /api/v1/chat - Status da API de chat
 */
router.get("/", (req, res) => {
  res.json({
    status: "active",
    service: "Sala Segura Chat API",
    features: [
      "Integra√ß√£o com OpenAI GPT-4o-mini",
      "Detec√ß√£o de inten√ß√£o de convers√£o",
      "Suporte em portugu√™s (PT-BR)",
      "Contexto de advogado especialista",
      "Metodologia Novo Pacto",
      "Sistema de contexto completo",
      "Respostas espec√≠ficas para Sala Segura",
    ],
    timestamp: new Date().toISOString(),
  })
})

module.exports = router
