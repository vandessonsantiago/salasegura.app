-- =====================================================
-- DATABASE CLEANUP SCRIPTS - VERS√ÉO CORRIGIDA
-- =====================================================

-- ‚úÖ CORRIGIDO: Erro de refer√™ncia amb√≠gua resolvido
-- ‚úÖ CORRIGIDO: Scripts duplicados removidos
-- ‚úÖ CORRIGIDO: L√≥gica mais segura implementada

-- Este arquivo cont√©m dois scripts:
-- 1. VERIFICA√á√ÉO: Mostra quais tabelas existem (execute primeiro)
-- 2. LIMPEZA: Remove tabelas n√£o essenciais (execute depois)

-- ‚ö†Ô∏è  IMPORTANTE:
-- - Execute a VERIFICA√á√ÉO primeiro para ver o que voc√™ tem
-- - S√≥ execute a LIMPEZA se estiver satisfeito com as tabelas opcionais
-- - As tabelas essenciais NUNCA ser√£o removidas

-- =====================================================
-- 1. SCRIPT DE VERIFICA√á√ÉO - APENAS MOSTRA TABELAS EXISTENTES
-- =====================================================

DO $$
DECLARE
    table_record RECORD;
    table_count INTEGER := 0;
    essential_tables TEXT[] := ARRAY[
        'users', 'user_profiles', 'agendamentos', 'payments',
        'conversions', 'checklist_sessions', 'checklist_items',
        'app_settings', 'asaas_webhook_config', 'asaas_webhook_logs', 'webhook_logs'
    ];
    optional_tables TEXT[] := ARRAY['_prisma_migrations', 'user_sessions', 'activity_logs'];
BEGIN
    RAISE NOTICE 'üìä VERIFICA√á√ÉO DE TABELAS EXISTENTES:';
    RAISE NOTICE '==========================================';
    RAISE NOTICE '';

    FOR table_record IN
        SELECT tablename
        FROM pg_tables
        WHERE schemaname = 'public'
        ORDER BY tablename
    LOOP
        table_count := table_count + 1;

        -- Verificar se √© tabela essencial ou opcional
        IF table_record.tablename = ANY(essential_tables) THEN
            RAISE NOTICE '%d. ‚úÖ % (ESSENCIAL)', table_count, table_record.tablename;
        ELSIF table_record.tablename = ANY(optional_tables) THEN
            RAISE NOTICE '%d. ‚ùå % (OPCIONAL)', table_count, table_record.tablename;
        ELSE
            RAISE NOTICE '%d. ‚ùì % (DESCONHECIDA)', table_count, table_record.tablename;
        END IF;
    END LOOP;

    RAISE NOTICE '';
    RAISE NOTICE 'üìã Voc√™ tem % tabelas no total', table_count;
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ RECOMENDA√á√ïES:';
    RAISE NOTICE '   ‚úÖ Mantenha todas as tabelas marcadas com ESSENCIAL';
    RAISE NOTICE '   ‚ùå Considere remover tabelas marcadas com OPCIONAL';
    RAISE NOTICE '   ‚ùì Verifique tabelas marcadas com DESCONHECIDA';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ Execute o script de limpeza se quiser remover as opcionais';
END $$;

-- =====================================================
-- =====================================================
-- =====================================================
-- 2. SCRIPT DE LIMPEZA - REMOVE TABELAS N√ÉO ESSENCIAIS
-- =====================================================
-- =====================================================
-- =====================================================

-- ‚ö†Ô∏è  ATEN√á√ÉO: Este script remove tabelas n√£o essenciais!
-- Execute apenas se estiver satisfeito com a verifica√ß√£o acima

DO $$
DECLARE
    table_name_to_check TEXT;
    table_count INTEGER := 0;
    table_record RECORD;
    tables_to_remove TEXT[] := ARRAY['_prisma_migrations', 'user_sessions', 'activity_logs'];
BEGIN
    RAISE NOTICE 'üßπ INICIANDO LIMPEZA SELETIVA...';
    RAISE NOTICE '==========================================';
    RAISE NOTICE '';

    -- Mostrar tabelas atuais antes da limpeza
    RAISE NOTICE 'üìä TABELAS ATUAIS ANTES DA LIMPEZA:';
    RAISE NOTICE '==========================================';

    FOR table_record IN
        SELECT tablename
        FROM pg_tables
        WHERE schemaname = 'public'
        ORDER BY tablename
    LOOP
        table_count := table_count + 1;
        RAISE NOTICE '%d. %', table_count, table_record.tablename;
    END LOOP;

    RAISE NOTICE '';
    RAISE NOTICE 'üéØ VERIFICANDO TABELAS PARA REMO√á√ÉO...';
    RAISE NOTICE '==========================================';

    FOREACH table_name_to_check IN ARRAY tables_to_remove
    LOOP
        IF EXISTS (
            SELECT 1
            FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_name = table_name_to_check
        ) THEN
            EXECUTE format('DROP TABLE IF EXISTS %I CASCADE', table_name_to_check);
            RAISE NOTICE '‚úÖ Tabela % removida', table_name_to_check;
        ELSE
            RAISE NOTICE '‚ÑπÔ∏è  Tabela % n√£o existe (pulando)', table_name_to_check;
        END IF;
    END LOOP;

    RAISE NOTICE '';
    RAISE NOTICE 'üéØ REMOVENDO √çNDICES DESNECESS√ÅRIOS...';
    RAISE NOTICE '==========================================';

    -- Remover √≠ndices relacionados √†s tabelas removidas
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'activity_logs') THEN
        DROP INDEX IF EXISTS idx_activity_logs_user_id;
        DROP INDEX IF EXISTS idx_activity_logs_created_at;
        RAISE NOTICE '‚úÖ √çndices de activity_logs removidos';
    END IF;

    -- Mostrar tabelas restantes
    RAISE NOTICE 'üìä TABELAS RESTANTES AP√ìS LIMPEZA:';
    RAISE NOTICE '==========================================';

    table_count := 0;
    FOR table_record IN
        SELECT tablename
        FROM pg_tables
        WHERE schemaname = 'public'
        ORDER BY tablename
    LOOP
        table_count := table_count + 1;
        RAISE NOTICE '%d. %', table_count, table_record.tablename;
    END LOOP;

    RAISE NOTICE '';
    RAISE NOTICE 'üéâ LIMPEZA FINALIZADA COM SUCESSO!';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã RESUMO DA LIMPEZA:';
    RAISE NOTICE '   ‚úÖ Tabelas n√£o essenciais removidas com seguran√ßa';
    RAISE NOTICE '   ‚úÖ Todas as tabelas essenciais preservadas';
    RAISE NOTICE '   ‚úÖ √çndices relacionados removidos';
    RAISE NOTICE '   ‚úÖ Sistema mais limpo e eficiente';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ PR√ìXIMOS PASSOS:';
    RAISE NOTICE '   1. Execute seus scripts principais (supabase_schema.sql, etc.)';
    RAISE NOTICE '   2. Teste a integra√ß√£o com test_integration.sql';
    RAISE NOTICE '   3. Configure webhooks no Asaas';
    RAISE NOTICE '';
END $$;

-- =====================================================
-- FIM DOS SCRIPTS DE LIMPEZA
-- =====================================================

-- üéØ RESUMO:
-- Execute primeiro o Script 1 (verifica√ß√£o) para ver suas tabelas
-- Depois execute o Script 2 (limpeza) se quiser remover opcionais
-- Suas tabelas essenciais estar√£o sempre seguras!

-- Criar tabela para armazenar casos de div√≥rcio
CREATE TABLE IF NOT EXISTS divorce_cases (
    id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    status TEXT NOT NULL DEFAULT 'draft',
    type TEXT NOT NULL CHECK (type IN ('extrajudicial', 'judicial')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- √çndice para melhorar consultas por usu√°rio
CREATE INDEX IF NOT EXISTS idx_divorce_cases_user_id ON divorce_cases (user_id);

-- √çndice para melhorar consultas por status
CREATE INDEX IF NOT EXISTS idx_divorce_cases_status ON divorce_cases (status);
