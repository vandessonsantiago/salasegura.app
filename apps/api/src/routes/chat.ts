import express, { Router } from 'express';
import OpenAI from 'openai';
import { ChatController } from '../controllers/ChatController';
import { authenticateToken } from '../middleware/auth';
import { supabaseAdmin as supabase } from '../lib/supabase';
import { ChatAIService } from '../ai/services/ChatAIService';
import { UserContextService } from '../ai/services/UserContextService';
import { LegalService } from '../legal/services/LegalService';
import { HealthCheckService } from '../ai/services/HealthCheckService';

const router: Router = express.Router();

// Inicializar servi√ßos de IA
ChatAIService.initialize();

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface ChatRequest {
  message: string;
  chatHistory: ChatMessage[];
}

interface ConversionData {
  shouldConvert: boolean;
  contactData: {
    email: string;
    whatsapp: string;
  };
  timestamp?: string;
}

// Sistema de contexto para o advogado
const systemPromptPt = `Voc√™ √© o advogado Vandesson Santiago, especialista em Direito de Fam√≠lia.

CREDENCIAIS: OAB/AM 12.217 - OA/PT 64171P

FORMATA√á√ÉO DAS RESPOSTAS:
- Use **negrito** para destacar informa√ß√µes importantes
- Use *it√°lico* para √™nfase ou dicas importantes
- Use listas com ‚Ä¢ para organizar informa√ß√µes
- Destaque **documentos**, **prazos** e **valores** importantes
- Mantenha formata√ß√£o limpa e profissional

REGRAS FUNDAMENTAIS:
1. Mantenha tom calmo, respeitoso e emp√°tico
2. Use vocabul√°rio simples, evitando juridiqu√™s
3. NUNCA incentive separa√ß√£o; atenda apenas quem j√° decidiu
4. N√ÉO tome partido nem fa√ßa julgamentos morais
5. Trate todas as informa√ß√µes como confidenciais
6. N√ÉO mencione M√©todo Novo Pacto ou Sala Segura no primeiro contato

SENSIBILIDADE E EMPATIA:
- NUNCA comemore, celebre ou demonstre alegria pela decis√£o de separa√ß√£o
- NUNCA use frases como "√≥timo", "perfeito", "fico feliz" em rela√ß√£o ao div√≥rcio
- SEMPRE demonstre compreens√£o e respeito pela complexidade emocional do momento
- Use linguagem neutra e profissional, mas acolhedora
- Reconhe√ßa que este √© um momento dif√≠cil e delicado
- Ofere√ßa apoio e orienta√ß√£o de forma respeitosa

PRIMEIRA INTERA√á√ÉO (ACOLHIMENTO):
- Cumprimente de forma acolhedora
- Confirme que entende que a decis√£o j√° foi tomada
- Fa√ßa apenas 2 perguntas essenciais:
  * Tipo de v√≠nculo (casamento ou uni√£o est√°vel)
  * Se h√° filhos menores envolvidos
- N√ÉO pergunte cidade/estado (direito √© o mesmo em todo Brasil)
- N√ÉO mencione m√©todos, plataformas ou servi√ßos
- Foque apenas em acolher e entender a situa√ß√£o b√°sica

SEGUNDA INTERA√á√ÉO (APRESENTA√á√ÉO DA SALA SEGURA):
- Agrade√ßa pelas informa√ß√µes compartilhadas
- Confirme que entende a situa√ß√£o (especialmente se h√° filhos menores)
- SEMPRE apresente a Sala Segura como solu√ß√£o natural:
  * "Para ajud√°-lo de forma mais organizada, temos a Sala Segura"
  * "√â um espa√ßo onde voc√™ pode organizar todo o processo"
  * "Inclui checklist, documentos, acordos e acompanhamento"
  * "O acesso √© gratuito e voc√™ s√≥ paga pelos servi√ßos que precisar"
- SEMPRE direcione para o formul√°rio de acesso
- N√ÉO pergunte "como voc√™ prefere seguir" - seja direto

PERGUNTAS PERMITIDAS:
- Tipo de v√≠nculo (casamento/uni√£o est√°vel)
- Exist√™ncia de filhos menores

PERGUNTAS PROIBIDAS:
- Motivo da separa√ß√£o
- Julgamentos morais
- Quest√µes que incentivem conflito
- Cidade e estado de resid√™ncia
- Mencionar M√©todo Novo Pacto ou Sala Segura

RESPONDA de forma acolhedora e profissional, sem mencionar produtos ou servi√ßos no primeiro contato.`;

/**
 * Detectar inten√ß√£o de convers√£o baseada na mensagem e hist√≥rico
 */
function detectConversionIntent(
  message: string,
  chatHistory: ChatMessage[]
): ConversionData {
  console.log('üîç Debug detectConversionIntent:', {
    message,
    chatHistoryLength: chatHistory.length,
    chatHistory: chatHistory.map((msg) => ({
      type: msg.type,
      content: msg.content.substring(0, 50),
    })),
  });

  // Se √© a primeira mensagem, N√ÉO detectar convers√£o
  if (chatHistory.length === 0) {
    console.log('‚ùå Primeira mensagem - n√£o detectar convers√£o');
    return {
      shouldConvert: false,
      contactData: { email: '', whatsapp: '' },
    };
  }

  // S√≥ ativar convers√£o ap√≥s duas respostas do usu√°rio (duas perguntas iniciais respondidas)
  if (chatHistory.length >= 2) {
    console.log('‚úÖ Convers√£o ativada ap√≥s duas respostas iniciais');
    return {
      shouldConvert: true,
      contactData: { email: '', whatsapp: '' },
      timestamp: new Date().toISOString(),
    };
  }

  const conversionKeywords = [
    'sala segura',
    'acesso',
    'link',
    'plataforma',
    'm√©todo',
    'novo pacto',
    'quero come√ßar',
    'vamos come√ßar',
    'iniciar o processo',
    'come√ßar o processo',
    'quero agora',
    'j√° estou pronto',
    'pronto para come√ßar',
    'concordo',
    'aceito',
    'quero avan√ßar',
    'formulario',
    'formul√°rio',
    'ir para',
    'onde',
    'quanto custa',
    'valor',
    'pre√ßo',
    'custo',
    'gratuito',
    'gratis',
    'quanto tempo',
    'prazo',
    'quando',
    'pr√≥ximo passo',
    'como fazer',
  ];

  const messageLower = message.toLowerCase();
  const matchedKeywords = conversionKeywords.filter((keyword) =>
    messageLower.includes(keyword)
  );

  const result = matchedKeywords.length > 0 && chatHistory.length >= 1;
  console.log('üîç Resultado detec√ß√£o:', { matchedKeywords, result });

  return {
    shouldConvert: result,
    contactData: { email: '', whatsapp: '' },
    timestamp: result ? new Date().toISOString() : undefined,
  };
}

/**
 * Extrair dados de contato da mensagem
 */
function extractContactData(message: string): {
  email: string;
  whatsapp: string;
} {
  const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/;
  const whatsappRegex = /(\+55\s?)?(\d{2}\s?)?(\d{4,5}\s?)?(\d{4})/;

  const email = message.match(emailRegex)?.[0] || '';
  const whatsapp = message.match(whatsappRegex)?.[0] || '';

  return { email, whatsapp };
}

/**
 * Construir mensagens para o OpenAI
 */
function buildMessages(request: ChatRequest): any[] {
  const systemPrompt = systemPromptPt;

  const messages: any[] = [
    {
      role: 'system',
      content: systemPrompt,
    },
  ];

  // Adicionar hist√≥rico de conversa
  request.chatHistory.forEach((msg) => {
    messages.push({
      role: msg.type === 'user' ? 'user' : 'assistant',
      content: msg.content,
    });
  });

  // Adicionar mensagem atual
  messages.push({
    role: 'user',
    content: request.message,
  });

  return messages;
}

/**
 * POST /api/chat - Processar mensagem do chat
 */
router.post('/', async (req, res) => {
  try {
    const { message, chatHistory = [], conversationId }: ChatRequest & { conversationId?: string } = req.body;

    console.log('üìù Recebida mensagem:', {
      message,
      chatHistoryLength: chatHistory.length,
      conversationId,
    });

    // Verificar se o usu√°rio est√° autenticado
    const authHeader = req.headers?.authorization;
    const isAuthenticatedRequest = !!authHeader && authHeader.startsWith('Bearer ');

    let userId = null;
    let currentConversationId = conversationId;
    let userContext = null;

    // Se autenticado, buscar contexto do usu√°rio
    if (isAuthenticatedRequest) {
      try {
        const token = authHeader.replace('Bearer ', '');
        const { data: { user }, error } = await supabase.auth.getUser(token);
        if (error || !user) {
          console.warn('‚ö†Ô∏è Token inv√°lido para usu√°rio autenticado');
        } else {
          userId = user.id;
          userContext = await UserContextService.getUserContext(userId);
          console.log('ÔøΩ [CHAT] Contexto do usu√°rio obtido:', {
            hasProfile: !!userContext?.userProfile,
            appointmentsCount: userContext?.activeAppointments?.length || 0,
            casesCount: userContext?.divorceCases?.length || 0
          });

          // Se n√£o h√° conversationId, buscar ou criar uma conversa ativa
          if (!currentConversationId) {
            const { data: conversations } = await supabase
              .from('chat_conversations')
              .select('id')
              .eq('user_id', userId)
              .order('updated_at', { ascending: false })
              .limit(1);

            if (conversations && conversations.length > 0) {
              currentConversationId = conversations[0].id;
              console.log('üìÇ Usando conversa existente:', currentConversationId);
            } else {
              // Criar nova conversa
              const { data: newConversation, error: createError } = await supabase
                .from('chat_conversations')
                .insert({
                  user_id: userId,
                  title: `Conversa ${new Date().toLocaleDateString('pt-BR')}`
                })
                .select('id')
                .single();

              if (createError) {
                console.error('‚ùå Erro ao criar conversa:', createError);
              } else {
                currentConversationId = newConversation.id;
                console.log('üìÇ Nova conversa criada:', currentConversationId);
              }
            }
          }
        }
      } catch (authError) {
        console.error('‚ùå Erro na autentica√ß√£o:', authError);
        userId = null;
      }
    }

    // Verificar se √© uma pergunta jur√≠dica espec√≠fica
    const legalResults = LegalService.searchLegalInfo(message);
    const hasLegalContext = legalResults.length > 0 && legalResults[0].relevance > 0.6;

    console.log('‚öñÔ∏è [CHAT] An√°lise jur√≠dica:', {
      hasLegalContext,
      topResult: legalResults[0]?.topic,
      relevance: legalResults[0]?.relevance
    });

    // Gerar resposta usando IA contextual
    const aiResponse = await ChatAIService.generateResponse(message, userContext);

    // Enriquecer resposta com informa√ß√µes legais se relevante
    let finalResponse = aiResponse;
    if (hasLegalContext) {
      const legalInfo = legalResults[0].data;
      const legalAddition = `\n\nüí° **Refer√™ncia Legal:** ${legalInfo.legislation || 'Consulte legisla√ß√£o espec√≠fica'}`;
      finalResponse += legalAddition;
    }

    // Adicionar sugest√µes personalizadas baseadas no contexto
    if (userContext) {
      const suggestions = generatePersonalizedSuggestions(userContext);
      if (suggestions.length > 0) {
        finalResponse += '\n\nüí° **Sugest√µes baseadas no seu perfil:**\n' +
          suggestions.map(s => `‚Ä¢ ${s}`).join('\n');
      }
    }

    // Salvar no hist√≥rico se usu√°rio autenticado
    if (userId && currentConversationId) {
      try {
        // Salvar mensagem do usu√°rio
        await supabase
          .from('chat_messages')
          .insert({
            conversation_id: currentConversationId,
            role: 'user',
            content: message
          });

        // Salvar resposta da IA
        await supabase
          .from('chat_messages')
          .insert({
            conversation_id: currentConversationId,
            role: 'assistant',
            content: finalResponse
          });

        console.log('üíæ [CHAT] Mensagens salvas na conversa:', currentConversationId);
      } catch (saveError) {
        console.error('‚ùå [CHAT] Erro ao salvar mensagens:', saveError);
        // N√£o falhar a resposta por erro de salvamento
      }
    }

    const responseData = {
      response: finalResponse,
      legalContext: hasLegalContext ? legalResults[0] : null,
      userContext: userContext ? {
        hasAppointments: userContext.activeAppointments.length > 0,
        hasCases: userContext.divorceCases.length > 0,
        conversationsCount: userContext.chatHistory.length
      } : null,
      suggestions: userContext ? generatePersonalizedSuggestions(userContext) : [],
      conversationId: currentConversationId
    };

    console.log('‚úÖ [CHAT] Resposta gerada com sucesso');
    res.json(responseData);

  } catch (error) {
    console.error('‚ùå [CHAT] Erro no processamento:', error);
    res.status(500).json({
      response: 'Ol√°! Sou o advogado Vandesson Santiago. Como posso ajudar com sua quest√£o jur√≠dica hoje?',
      error: 'Erro interno do servidor'
    });
  }
});

// Fun√ß√£o auxiliar para gerar sugest√µes personalizadas
function generatePersonalizedSuggestions(userContext: any): string[] {
  const suggestions = [];

  if (userContext.activeAppointments?.length === 0 && userContext.divorceCases?.length > 0) {
    suggestions.push('Considere agendar uma consulta para discutir seu caso em andamento');
  }

  if (userContext.divorceCases?.some((c: any) => c.hasMinors) &&
      !userContext.chatHistory?.some((h: any) => h.content.includes('guarda'))) {
    suggestions.push('Informa√ß√µes sobre guarda de filhos podem ser √∫teis para seu caso');
  }

  if (userContext.activeAppointments?.length > 0) {
    suggestions.push('Voc√™ tem consultas agendadas - posso ajudar com d√∫vidas espec√≠ficas');
  }

  return suggestions;
}

/**
 * GET /api/chat - Status da API de chat
 */
router.get('/', (req, res) => {
  res.json({
    status: 'active',
    service: 'Sala Segura Chat API',
    features: [
      'Integra√ß√£o com OpenAI GPT-4o-mini',
      'Detec√ß√£o de inten√ß√£o de convers√£o',
      'Suporte em portugu√™s (PT-BR)',
      'Contexto de advogado especialista',
      'Metodologia Novo Pacto',
      'Sistema de contexto completo',
      'Respostas espec√≠ficas para Sala Segura',
    ],
    timestamp: new Date().toISOString(),
  });
});

// Rotas REST para chat autenticado
router.post('/conversations', authenticateToken, ChatController.createConversation);
router.get('/conversations/:id/messages', authenticateToken, ChatController.getConversationMessages);
router.post('/conversations/:id/messages', authenticateToken, ChatController.addMessage);
router.delete('/conversations/:id', authenticateToken, ChatController.deleteConversation);
router.delete('/conversations', authenticateToken, ChatController.deleteAllUserConversations);

// Rotas de monitoramento e health check
router.get('/health', async (req, res) => {
  try {
    const healthStatus = await HealthCheckService.getAIStatus();
    res.json(healthStatus);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Health check failed',
      timestamp: new Date().toISOString()
    });
  }
});

router.get('/health/metrics', async (req, res) => {
  try {
    const metrics = await HealthCheckService.getMetricsStatus();
    res.json(metrics);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Metrics check failed',
      timestamp: new Date().toISOString()
    });
  }
});

router.get('/health/tests', async (req, res) => {
  try {
    const testResults = await HealthCheckService.testAIServices();
    res.json(testResults);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Tests failed',
      timestamp: new Date().toISOString()
    });
  }
});

// Rotas para gerenciamento de conversas (APENAS para uso espec√≠fico, n√£o conflitar com rota principal)
router.get('/conversations', authenticateToken, ChatController.getUserConversations);
router.post('/conversations', authenticateToken, ChatController.createConversation);
router.get('/conversations/:id/messages', authenticateToken, ChatController.getConversationMessages);
router.post('/conversations/:id/messages', authenticateToken, ChatController.addMessage);
router.delete('/conversations/:id', authenticateToken, ChatController.deleteConversation);
router.delete('/conversations', authenticateToken, ChatController.deleteAllUserConversations);

export default router;
