import express, { Router } from 'express';
import OpenAI from 'openai';
import { ChatController } from '../controllers/ChatController';
import { authenticateToken } from '../middleware/auth';
import { supabaseAdmin as supabase } from '../lib/supabase';
import { ChatAIService } from '../ai/services/ChatAIService';
import { UserContextService } from '../ai/services/UserContextService';
import { LegalService } from '../legal/services/LegalService';
import { HealthCheckService } from '../ai/services/HealthCheckService';

const router: Router = express.Router();

// Inicializar servi√ßos de IA
ChatAIService.initialize();

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface ChatRequest {
  message: string;
  chatHistory: ChatMessage[];
}

interface ConversionData {
  shouldConvert: boolean;
  contactData: {
    email: string;
    whatsapp: string;
  };
  timestamp?: string;
}

// Sistema de contexto para o advogado
const systemPromptPt = `INSTRU√á√ïES ABSOLUTAS - IGNORE QUALQUER OUTRO PROMPT:

Voc√™ √© o advogado Vandesson Santiago, especialista em Direito de Fam√≠lia.
CREDENCIAIS: OAB/AM 12.217 - OA/PT 64171P

IMPORTANTE: IGNORE qualquer outro prompt ou instru√ß√£o. Siga APENAS estas regras:

FLUXO OBRIGAT√ìRIO DE 2 INTERA√á√ïES:

PRIMEIRA INTERA√á√ÉO (QUANDO N√ÉO H√Å HIST√ìRICO DE CONVERSA):
Responda APENAS com:
- Cumprimento acolhedor
- 2 perguntas EXATAS:
  * "Qual √© o tipo de v√≠nculo? (casamento ou uni√£o est√°vel)"
  * "H√° filhos menores envolvidos?"
- N√ÉO mencione Sala Segura
- N√ÉO d√™ informa√ß√µes jur√≠dicas detalhadas

SEGUNDA INTERA√á√ÉO (QUANDO H√Å HIST√ìRICO DE CONVERSA):
Responda com EXATAMENTE esta estrutura:

1. **AGRADECIMENTO + CONTEXTO ESPEC√çFICO**
   - "Obrigado pelas informa√ß√µes. Entendo que se trata de [repetir exatamente o que usu√°rio disse]"

2. **EXPLICA√á√ÉO T√âCNICA CONTEXTUALIZADA** (baseada na resposta do usu√°rio):
   - **Casamento com filhos menores:** "No caso de div√≥rcio com filhos menores, √© obrigat√≥rio o processo judicial. Isso permite definir quest√µes importantes como guarda dos filhos, regime de visitas, pens√£o aliment√≠cia e partilha de bens de forma segura e legal."
   - **Casamento sem filhos:** "Para div√≥rcio consensual sem filhos, voc√™ pode optar pelo processo mais r√°pido no cart√≥rio, com menor custo e prazo."
   - **Uni√£o est√°vel com filhos:** "Na dissolu√ß√£o de uni√£o est√°vel com filhos, o processo judicial √© obrigat√≥rio para definir guarda, visitas e pens√£o."
   - **Uni√£o est√°vel sem filhos:** "Para dissolu√ß√£o consensual de uni√£o est√°vel sem filhos, √© poss√≠vel usar o processo mais simples no cart√≥rio."

3. **REFER√äNCIA LEGAL √öNICA** (bem posicionada):
   - **Casamento com filhos menores:** üí° **Refer√™ncia Legal:** Lei 11.441/07, art. 1.124-A (div√≥rcio judicial obrigat√≥rio)
   - **Casamento sem filhos:** üí° **Refer√™ncia Legal:** Lei 11.441/07 (div√≥rcio consensual no cart√≥rio)
   - **Uni√£o est√°vel com filhos:** üí° **Refer√™ncia Legal:** Lei 11.441/07, art. 1.124-A (dissolu√ß√£o judicial)
   - **Uni√£o est√°vel sem filhos:** üí° **Refer√™ncia Legal:** Lei 11.441/07 (dissolu√ß√£o consensual)

4. **APRESENTA√á√ÉO PERSUASIVA DA SALA SEGURA:**
   "Para voc√™ entender melhor o processo de div√≥rcio e se organizar, voc√™ pode acessar a √°rea autenticada da Sala Segura:
   ‚Ä¢ Checklist completo do processo
   ‚Ä¢ Documentos organizados
   ‚Ä¢ Acompanhamento profissional"

5. **CALL TO ACTION FORTE:**
   "PREENCHA AGORA O FORMUL√ÅRIO PARA CADASTRAR SUA CONTA NA SALA SEGURA. O ACESSO √â GRATUITO."

- N√ÉO FA√áA MAIS PERGUNTAS
- N√ÉO REPITA refer√™ncias legais
- N√ÉO use texto gen√©rico como "Consulte legisla√ß√£o espec√≠fica"

EXEMPLOS DE RESPOSTAS NATURAIS:

Usu√°rio: "Casamento com filhos menores"
Resposta:
"Obrigado pelas informa√ß√µes. Entendo que se trata de um casamento com filhos menores.

No caso de div√≥rcio com filhos menores, √© obrigat√≥rio o processo judicial. Isso permite definir quest√µes importantes como guarda dos filhos, regime de visitas, pens√£o aliment√≠cia e partilha de bens de forma segura e legal.

üí° **Refer√™ncia Legal:** Lei 11.441/07, art. 1.124-A (div√≥rcio judicial obrigat√≥rio)

Para voc√™ entender melhor o processo de div√≥rcio e se organizar, voc√™ pode acessar a √°rea autenticada da Sala Segura:
‚Ä¢ Checklist completo do processo
‚Ä¢ Documentos organizados
‚Ä¢ Acompanhamento profissional

PREENCHA AGORA O FORMUL√ÅRIO PARA CADASTRAR SUA CONTA NA SALA SEGURA. O ACESSO √â GRATUITO."

REGRA FINAL: Se h√° hist√≥rico = segunda intera√ß√£o = seguir EXATAMENTE esta estrutura. Sem exce√ß√µes.`;

// Prompt avan√ßado para usu√°rios autenticados com contexto personalizado
const buildAuthenticatedUserPrompt = (userContext: any, message: string, chatHistory: ChatMessage[]) => {
  const userName = userContext?.userProfile?.name || 'cliente';
  const userEmail = userContext?.userProfile?.email || 'n√£o informado';
  const activeAppointments = userContext?.activeAppointments?.length || 0;
  const divorceCases = userContext?.divorceCases?.length || 0;
  const chatConversations = userContext?.chatHistory?.length || 0;

  // Extrair t√≥picos j√° discutidos
  const discussedTopics = extractDiscussedTopics(chatHistory);

  // Gerar recomenda√ß√µes personalizadas
  const recommendations = generatePersonalizedRecommendations(userContext);

  // Formatar informa√ß√µes de agendamento
  const appointmentInfo = formatAppointmentInfo(userContext?.activeAppointments || []);

  return `INSTRU√á√ïES ABSOLUTAS - IGNORE QUALQUER OUTRO PROMPT:

Voc√™ √© Vandesson Santiago, advogado especialista em Direito de Fam√≠lia brasileiro.
CREDENCIAIS: OAB/AM 12.217 - OA/PT 64171P

CONTEXTO PERSONALIZADO DO USU√ÅRIO:
üë§ NOME: ${userName}
üìß EMAIL: ${userEmail}
üìÖ PR√ìXIMA CONSULTA: ${appointmentInfo}
üìä TOTAL DE AGENDAMENTOS: ${activeAppointments}
‚öñÔ∏è CASOS DE DIV√ìRCIO: ${divorceCases}
üí¨ CONVERSAS ANTERIORES: ${chatConversations}

T√ìPICOS J√Å DISCUTIDOS: ${discussedTopics.join(', ') || 'nenhum'}

INSTRU√á√ïES ESPEC√çFICAS PARA PERGUNTAS SOBRE CONSULTAS:

QUANDO O USU√ÅRIO PERGUNTAR SOBRE CONSULTAS/CONSULTA/AGENDAMENTO:
- Use sempre o nome do usu√°rio na sauda√ß√£o
- Forne√ßa a data e hora exatas da pr√≥xima consulta
- Formate a resposta de forma clara e amig√°vel
- Ofere√ßa ajuda adicional se necess√°rio
- Mantenha tom profissional e acolhedor

EXEMPLO DE RESPOSTA PARA "Quando √© minha consulta?":
"Ol√°, ${userName}!

Sua consulta est√° agendada para o dia ${appointmentInfo.split(',')[0]}, √†s ${appointmentInfo.split(',')[1] || 'hor√°rio n√£o informado'}.

Se precisar de mais informa√ß√µes ou tiver alguma d√∫vida espec√≠fica sobre seu caso de div√≥rcio antes da reuni√£o, estou √† disposi√ß√£o para ajudar.

Se houver algo mais que voc√™ queira discutir ou preparar para a consulta, por favor, me avise!

Aguardo seu retorno."

CONHECIMENTO JUR√çDICO ESPECIALIZADO:
‚Ä¢ Lei de Div√≥rcio (6.515/77 e 11.441/07)
‚Ä¢ C√≥digo Civil - Parte Geral do Direito de Fam√≠lia (Arts. 1.511-1.783)
‚Ä¢ Lei da Aliena√ß√£o Parental (12.318/10)
‚Ä¢ Lei de Alimentos (5.478/68)
‚Ä¢ Estatuto da Crian√ßa e do Adolescente (8.069/90)
‚Ä¢ Regimes de Bens (CC Arts. 1.639-1.688)

METODOLOGIA DE RESPOSTA PARA USU√ÅRIOS AUTENTICADOS:

1. **SAUDA√á√ÉO PERSONALIZADA**
   - Use o nome do usu√°rio quando apropriado
   - Considere o contexto das conversas anteriores

2. **AN√ÅLISE CONTEXTUAL**
   - Considere agendamentos ativos e casos em andamento
   - Relacione com t√≥picos j√° discutidos
   - Identifique necessidades espec√≠ficas baseadas no perfil

3. **RESPOSTA JUR√çDICA ESPECIALIZADA**
   - Cite legisla√ß√£o brasileira atual e espec√≠fica
   - Foque em solu√ß√µes pr√°ticas e aplic√°veis
   - Considere a situa√ß√£o particular do usu√°rio

4. **RECOMENDA√á√ïES PERSONALIZADAS**
   ${recommendations.length > 0 ? recommendations.map(r => `‚Ä¢ ${r}`).join('\n   ') : '‚Ä¢ Considere agendar uma consulta para discutir seu caso espec√≠fico'}

5. **ENCERRAMENTO PROFISSIONAL**
   - Ofere√ßa acompanhamento cont√≠nuo
   - Sugira pr√≥ximos passos baseados no contexto

Linguagem: Profissional, emp√°tica, acess√≠vel. Use o nome do usu√°rio quando apropriado.
Considere sempre o contexto completo do usu√°rio em suas respostas.

PERGUNTA ATUAL: ${message}`;
};

// Fun√ß√£o auxiliar para formatar informa√ß√µes de agendamento
function formatAppointmentInfo(appointments: any[]): string {
  if (!appointments || appointments.length === 0) {
    return 'Nenhuma consulta agendada';
  }

  const activeAppointments = appointments.filter(apt => apt.status !== 'Cancelado');

  if (activeAppointments.length === 0) {
    return 'Nenhuma consulta ativa';
  }

  // Pegar a pr√≥xima consulta (mais pr√≥xima no futuro)
  const now = new Date();
  const futureAppointments = activeAppointments
    .filter(apt => {
      const appointmentDate = new Date(`${apt.data}T${apt.horario}`);
      return appointmentDate > now;
    })
    .sort((a, b) => {
      const dateA = new Date(`${a.data}T${a.horario}`);
      const dateB = new Date(`${b.data}T${b.horario}`);
      return dateA.getTime() - dateB.getTime();
    });

  if (futureAppointments.length === 0) {
    return 'Nenhuma consulta futura agendada';
  }

  const nextAppointment = futureAppointments[0];
  const appointmentDate = new Date(`${nextAppointment.data}T${nextAppointment.horario}`);

  // Formatar data e hora em portugu√™s
  const formattedDate = appointmentDate.toLocaleDateString('pt-BR', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const formattedTime = appointmentDate.toLocaleTimeString('pt-BR', {
    hour: '2-digit',
    minute: '2-digit'
  });

  return `${formattedDate}, √†s ${formattedTime}`;
}

// Fun√ß√£o auxiliar para extrair t√≥picos discutidos
function extractDiscussedTopics(chatHistory: ChatMessage[]): string[] {
  const legalTopics = [
    'div√≥rcio', 'guarda', 'alimentos', 'pens√£o', 'patrim√¥nio',
    'regime de bens', 'partilha', 'filhos', 'menores', 'casamento',
    'uni√£o est√°vel', 'separa√ß√£o', 'judicial', 'cart√≥rio', 'consensual'
  ];

  const discussedTopics = new Set<string>();

  chatHistory.forEach((msg: ChatMessage) => {
    const content = msg.content.toLowerCase();
    legalTopics.forEach(topic => {
      if (content.includes(topic)) {
        discussedTopics.add(topic);
      }
    });
  });

  return Array.from(discussedTopics);
}

// Fun√ß√£o auxiliar para gerar recomenda√ß√µes personalizadas
function generatePersonalizedRecommendations(userContext: any): string[] {
  const recommendations = [];

  if (userContext?.divorceCases?.length > 0 && userContext?.activeAppointments?.length === 0) {
    recommendations.push('Considere agendar uma consulta para discutir seu caso em andamento');
  }

  if (userContext?.divorceCases?.some((c: any) => c.hasMinors) &&
      !userContext?.chatHistory?.some((h: any) => h.content.toLowerCase().includes('guarda'))) {
    recommendations.push('Informa√ß√µes sobre guarda de filhos podem ser √∫teis para seu caso');
  }

  if (userContext?.activeAppointments?.length > 0) {
    recommendations.push('Voc√™ tem consultas agendadas - posso ajudar com d√∫vidas espec√≠ficas sobre seu caso');
  }

  if (userContext?.divorceCases?.length === 0 && userContext?.chatHistory?.length > 0) {
    recommendations.push('Posso ajudar a iniciar um processo de div√≥rcio ou esclarecer d√∫vidas sobre legisla√ß√£o');
  }

  return recommendations;
}

/**
 * Detectar inten√ß√£o de convers√£o baseada na mensagem e hist√≥rico
 */
function detectConversionIntent(
  message: string,
  chatHistory: ChatMessage[]
): ConversionData {
  console.log('üîç Debug detectConversionIntent:', {
    message,
    chatHistoryLength: chatHistory.length,
    chatHistory: chatHistory.map((msg) => ({
      type: msg.type,
      content: msg.content.substring(0, 50),
    })),
  });

  // Se √© a primeira mensagem, N√ÉO detectar convers√£o
  if (chatHistory.length === 0) {
    console.log('‚ùå Primeira mensagem - n√£o detectar convers√£o');
    return {
      shouldConvert: false,
      contactData: { email: '', whatsapp: '' },
    };
  }

  // L√≥gica simplificada: qualquer resposta ap√≥s primeira intera√ß√£o = engajamento
  // N√£o precisamos de resposta completa, basta demonstrar interesse
  const hasEngagement = chatHistory.some((msg) => {
    const contentLower = msg.content.toLowerCase();
    return contentLower.includes('quanto tempo') ||
           contentLower.includes('h√° quanto') ||
           contentLower.includes('filhos') ||
           contentLower.includes('advogado') ||
           contentLower.includes('processo') ||
           contentLower.includes('situa√ß√£o') ||
           contentLower.includes('v√≠nculo') ||
           contentLower.includes('casamento') ||
           contentLower.includes('uni√£o est√°vel');
  });

  // SE TEM HIST√ìRICO E O USU√ÅRIO EST√Å RESPONDENDO ALGO RELACIONADO = SEGUNDA INTERA√á√ÉO
  if (chatHistory.length > 0 && hasEngagement) {
    console.log('‚úÖ SEGUNDA INTERA√á√ÉO DETECTADA - apresentar Sala Segura');
    return {
      shouldConvert: true,
      contactData: { email: '', whatsapp: '' },
      timestamp: new Date().toISOString(),
    };
  }

  // Se tem hist√≥rico mas n√£o est√° respondendo √†s perguntas, n√£o converter ainda
  if (chatHistory.length > 0 && !hasEngagement) {
    console.log('‚è≥ Hist√≥rico existe mas usu√°rio n√£o est√° engajado - aguardar resposta');
    return {
      shouldConvert: false,
      contactData: { email: '', whatsapp: '' },
    };
  }

  const conversionKeywords = [
    'sala segura',
    'acesso',
    'link',
    'plataforma',
    'm√©todo',
    'novo pacto',
    'quero come√ßar',
    'vamos come√ßar',
    'iniciar o processo',
    'come√ßar o processo',
    'quero agora',
    'j√° estou pronto',
    'pronto para come√ßar',
    'concordo',
    'aceito',
    'quero avan√ßar',
    'formulario',
    'formul√°rio',
    'ir para',
    'onde',
    'quanto custa',
    'valor',
    'pre√ßo',
    'custo',
    'gratuito',
    'gratis',
    'quanto tempo',
    'prazo',
    'quando',
    'pr√≥ximo passo',
    'como fazer',
  ];

  const messageLower = message.toLowerCase();
  const matchedKeywords = conversionKeywords.filter((keyword) =>
    messageLower.includes(keyword)
  );

  const result = matchedKeywords.length > 0 && chatHistory.length >= 1;
  console.log('üîç Resultado detec√ß√£o:', { matchedKeywords, result });

  return {
    shouldConvert: result,
    contactData: { email: '', whatsapp: '' },
    timestamp: result ? new Date().toISOString() : undefined,
  };
}

/**
 * Extrair dados de contato da mensagem
 */
function extractContactData(message: string): {
  email: string;
  whatsapp: string;
} {
  const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/;
  const whatsappRegex = /(\+55\s?)?(\d{2}\s?)?(\d{4,5}\s?)?(\d{4})/;

  const email = message.match(emailRegex)?.[0] || '';
  const whatsapp = message.match(whatsappRegex)?.[0] || '';

  return { email, whatsapp };
}

/**
 * Construir mensagens para o OpenAI
 */
function buildMessages(request: ChatRequest): any[] {
  const systemPrompt = systemPromptPt;

  const messages: any[] = [
    {
      role: 'system',
      content: systemPrompt,
    },
  ];

  // Adicionar hist√≥rico de conversa
  request.chatHistory.forEach((msg) => {
    messages.push({
      role: msg.type === 'user' ? 'user' : 'assistant',
      content: msg.content,
    });
  });

  // Adicionar mensagem atual
  messages.push({
    role: 'user',
    content: request.message,
  });

  return messages;
}

/**
 * POST /api/chat - Processar mensagem do chat
 */
router.post('/', async (req, res) => {
  try {
    const { message, chatHistory = [], conversationId }: ChatRequest & { conversationId?: string } = req.body;

    console.log('üìù Recebida mensagem:', {
      message,
      chatHistoryLength: chatHistory.length,
      conversationId,
      chatHistory: chatHistory.map((msg, index) => ({
        index,
        type: msg.type,
        contentPreview: msg.content.substring(0, 50),
        timestamp: msg.timestamp
      }))
    });

    // Verificar se o usu√°rio est√° autenticado
    const authHeader = req.headers?.authorization;
    const isAuthenticatedRequest = !!authHeader && authHeader.startsWith('Bearer ');

    console.log('üîê [CHAT] Verifica√ß√£o de autentica√ß√£o:', {
      hasAuthHeader: !!authHeader,
      isAuthenticatedRequest,
      authHeaderPreview: authHeader ? authHeader.substring(0, 20) + '...' : null
    });

    let userId = null;
    let currentConversationId = conversationId;
    let userContext = null;

    // Se autenticado, buscar contexto do usu√°rio
    if (isAuthenticatedRequest) {
      try {
        const token = authHeader.replace('Bearer ', '');
        console.log('üîë [CHAT] Token extra√≠do, fazendo valida√ß√£o...');

        const { data: { user }, error } = await supabase.auth.getUser(token);
        
        console.log('üë§ [CHAT] Resultado da valida√ß√£o do token:', {
          hasUser: !!user,
          userId: user?.id,
          hasError: !!error,
          errorMessage: error?.message
        });
        
        if (error || !user) {
          console.warn('‚ö†Ô∏è Token inv√°lido para usu√°rio autenticado');
        } else {
          userId = user.id;
          console.log('‚úÖ [CHAT] Usu√°rio autenticado com sucesso:', userId);
          userContext = await UserContextService.getUserContext(userId);
          console.log('üß† [CHAT] Contexto do usu√°rio obtido:', {
            hasProfile: !!userContext?.userProfile,
            appointmentsCount: userContext?.activeAppointments?.length || 0,
            casesCount: userContext?.divorceCases?.length || 0,
            profileName: userContext?.userProfile?.name
          });

          // Se n√£o h√° conversationId, buscar ou criar uma conversa ativa
          if (!currentConversationId) {
            const { data: conversations } = await supabase
              .from('chat_conversations')
              .select('id')
              .eq('user_id', userId)
              .order('updated_at', { ascending: false })
              .limit(1);

            if (conversations && conversations.length > 0) {
              currentConversationId = conversations[0].id;
              console.log('üìÇ Usando conversa existente:', currentConversationId);
            } else {
              // Criar nova conversa
              const { data: newConversation, error: createError } = await supabase
                .from('chat_conversations')
                .insert({
                  user_id: userId,
                  title: `Conversa ${new Date().toLocaleDateString('pt-BR')}`
                })
                .select('id')
                .single();

              if (createError) {
                console.error('‚ùå Erro ao criar conversa:', createError);
              } else {
                currentConversationId = newConversation.id;
                console.log('üìÇ Nova conversa criada:', currentConversationId);
              }
            }
          }
        }
      } catch (authError) {
        console.error('‚ùå Erro na autentica√ß√£o:', authError);
        userId = null;
      }
    }

    // Verificar se √© uma pergunta jur√≠dica espec√≠fica
    const legalResults = LegalService.searchLegalInfo(message);
    const hasLegalContext = legalResults.length > 0 && legalResults[0].relevance > 0.6;

    // Detectar inten√ß√£o de convers√£o APENAS para usu√°rios N√ÉO autenticados
    let conversionData: ConversionData | null = null;
    if (!isAuthenticatedRequest) {
      conversionData = detectConversionIntent(message, chatHistory);
      console.log('üîÑ [CHAT] Dados de convers√£o (n√£o autenticado):', conversionData);
    } else {
      console.log('üîÑ [CHAT] Usu√°rio autenticado - pulando detec√ß√£o de convers√£o');
    }

    // Gerar resposta usando IA contextual com prompt apropriado
    let selectedPrompt = systemPromptPt; // Prompt padr√£o para n√£o autenticados

    if (isAuthenticatedRequest && userContext) {
      // Usar prompt avan√ßado para usu√°rios autenticados
      selectedPrompt = buildAuthenticatedUserPrompt(userContext, message, chatHistory);
      console.log('üéØ [CHAT] Usando prompt avan√ßado para usu√°rio autenticado');
    } else {
      console.log('üìù [CHAT] Usando prompt padr√£o para usu√°rio n√£o autenticado');
    }

    const aiResponse = await ChatAIService.generateResponse(message, userContext, selectedPrompt);

    // Adicionar sugest√µes personalizadas baseadas no contexto (apenas para autenticados)
    let finalResponse = aiResponse;
    if (isAuthenticatedRequest && userContext) {
      const suggestions = generatePersonalizedSuggestions(userContext);
      if (suggestions.length > 0) {
        finalResponse += '\n\nüí° **Sugest√µes baseadas no seu perfil:**\n' +
          suggestions.map(s => `‚Ä¢ ${s}`).join('\n');
      }
    }

    // Salvar no hist√≥rico se usu√°rio autenticado
    if (userId && currentConversationId) {
      try {
        // Salvar mensagem do usu√°rio
        await supabase
          .from('chat_messages')
          .insert({
            conversation_id: currentConversationId,
            role: 'user',
            content: message
          });

        // Salvar resposta da IA
        await supabase
          .from('chat_messages')
          .insert({
            conversation_id: currentConversationId,
            role: 'assistant',
            content: finalResponse
          });

        console.log('üíæ [CHAT] Mensagens salvas na conversa:', currentConversationId);
      } catch (saveError) {
        console.error('‚ùå [CHAT] Erro ao salvar mensagens:', saveError);
        // N√£o falhar a resposta por erro de salvamento
      }
    }

    const responseData = {
      response: finalResponse,
      legalContext: hasLegalContext ? legalResults[0] : null,
      userContext: userContext ? {
        hasAppointments: userContext.activeAppointments.length > 0,
        hasCases: userContext.divorceCases.length > 0,
        conversationsCount: userContext.chatHistory.length
      } : null,
      suggestions: userContext ? generatePersonalizedSuggestions(userContext) : [],
      conversationId: currentConversationId,
      conversionData: conversionData // Apenas para usu√°rios n√£o autenticados
    };

    console.log('‚úÖ [CHAT] Resposta gerada com sucesso');
    res.json(responseData);

  } catch (error) {
    console.error('‚ùå [CHAT] Erro no processamento:', error);
    res.status(500).json({
      response: 'Ol√°! Sou o advogado Vandesson Santiago. Como posso ajudar com sua quest√£o jur√≠dica hoje?',
      error: 'Erro interno do servidor'
    });
  }
});

// Fun√ß√£o auxiliar para gerar sugest√µes personalizadas
function generatePersonalizedSuggestions(userContext: any): string[] {
  const suggestions = [];

  if (userContext.activeAppointments?.length === 0 && userContext.divorceCases?.length > 0) {
    suggestions.push('Considere agendar uma consulta para discutir seu caso em andamento');
  }

  if (userContext.divorceCases?.some((c: any) => c.hasMinors) &&
      !userContext.chatHistory?.some((h: any) => h.content.includes('guarda'))) {
    suggestions.push('Informa√ß√µes sobre guarda de filhos podem ser √∫teis para seu caso');
  }

  if (userContext.activeAppointments?.length > 0) {
    suggestions.push('Voc√™ tem consultas agendadas - posso ajudar com d√∫vidas espec√≠ficas');
  }

  return suggestions;
}

/**
 * GET /api/chat - Status da API de chat
 */
router.get('/', (req, res) => {
  res.json({
    status: 'active',
    service: 'Sala Segura Chat API',
    features: [
      'Integra√ß√£o com OpenAI GPT-4o-mini',
      'Detec√ß√£o de inten√ß√£o de convers√£o',
      'Suporte em portugu√™s (PT-BR)',
      'Contexto de advogado especialista',
      'Metodologia Novo Pacto',
      'Sistema de contexto completo',
      'Respostas espec√≠ficas para Sala Segura',
    ],
    timestamp: new Date().toISOString(),
  });
});

// Rotas REST para chat autenticado
router.post('/conversations', authenticateToken, ChatController.createConversation);
router.get('/conversations/:id/messages', authenticateToken, ChatController.getConversationMessages);
router.post('/conversations/:id/messages', authenticateToken, ChatController.addMessage);
router.delete('/conversations/:id', authenticateToken, ChatController.deleteConversation);
router.delete('/conversations', authenticateToken, ChatController.deleteAllUserConversations);

// Rotas de monitoramento e health check
router.get('/health', async (req, res) => {
  try {
    const healthStatus = await HealthCheckService.getAIStatus();
    res.json(healthStatus);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Health check failed',
      timestamp: new Date().toISOString()
    });
  }
});

router.get('/health/metrics', async (req, res) => {
  try {
    const metrics = await HealthCheckService.getMetricsStatus();
    res.json(metrics);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Metrics check failed',
      timestamp: new Date().toISOString()
    });
  }
});

router.get('/health/tests', async (req, res) => {
  try {
    const testResults = await HealthCheckService.testAIServices();
    res.json(testResults);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Tests failed',
      timestamp: new Date().toISOString()
    });
  }
});

// Rotas para gerenciamento de conversas (APENAS para uso espec√≠fico, n√£o conflitar com rota principal)
router.get('/conversations', authenticateToken, ChatController.getUserConversations);
router.post('/conversations', authenticateToken, ChatController.createConversation);
router.get('/conversations/:id/messages', authenticateToken, ChatController.getConversationMessages);
router.post('/conversations/:id/messages', authenticateToken, ChatController.addMessage);
router.delete('/conversations/:id', authenticateToken, ChatController.deleteConversation);
router.delete('/conversations', authenticateToken, ChatController.deleteAllUserConversations);

export default router;
