import express, { Request, Response, Router } from "express";
import crypto from "crypto";
import { supabaseAdmin as supabase } from "../lib/supabase";

const router: Router = express.Router();

interface ConversionRequest {
  name: string;
  email: string;
  whatsapp: string;
}

// Revisando e ajustando o tipo ConversionData para alinhar com a tabela no Supabase
interface ConversionData {
  id: string; // Campo obrigat√≥rio gerado pelo Supabase
  name: string;
  email: string;
  whatsapp: string;
  access_token: string;
  status: 'pending' | 'completed';
  created_at: string; // Campo obrigat√≥rio gerado pelo Supabase
}

/**
 * POST /conversions - Processar formul√°rio de convers√£o do chat
 * Cria um token de acesso para registro seguro de novos usu√°rios
 */
router.post('/', async (req: Request, res: Response) => {
  try {
    const { name, email, whatsapp }: ConversionRequest = req.body;

    // Valida√ß√£o b√°sica
    if (!name || !email || !whatsapp) {
      return res.status(400).json({
        success: false,
        error: "Todos os campos s√£o obrigat√≥rios (name, email, whatsapp)",
      });
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        success: false,
        error: "Formato de email inv√°lido",
      });
    }

    console.log('üîç Processando convers√£o para:', { name, email, whatsapp });

    // Verificar se o usu√°rio j√° existe no Supabase
    // Fazemos isso tentando um signup tempor√°rio e verificando o erro
    console.log('üîç Verificando se usu√°rio j√° existe...');
    
    try {
      const { data: testUser, error: existsError } = await supabase.auth.admin.createUser({
        email: email,
        password: 'temp123456789', // Senha tempor√°ria
        email_confirm: false, // N√£o confirmar email
      });
      
      // Se deu erro de usu√°rio j√° existente
      if (existsError && (
        existsError.message?.toLowerCase().includes('already') ||
        existsError.message?.toLowerCase().includes('exists') ||
        existsError.message?.toLowerCase().includes('registered')
      )) {
        console.log('‚ö†Ô∏è Usu√°rio j√° existe:', email);
        return res.status(409).json({
          success: false,
          error: "email_exists", 
          message: "Este email j√° possui uma conta cadastrada",
          shouldShowLogin: true
        });
      }
      
      // Se foi outro erro
      if (existsError) {
        console.error('‚ùå Erro ao verificar usu√°rio:', existsError);
        return res.status(500).json({
          success: false,
          error: "Erro ao processar solicita√ß√£o",
        });
      }
      
      // Se chegou at√© aqui, usu√°rio n√£o existe, ent√£o deletamos o usu√°rio tempor√°rio
      if (testUser?.user?.id) {
        await supabase.auth.admin.deleteUser(testUser.user.id);
        console.log('‚úÖ Email dispon√≠vel para novo usu√°rio');
      }

    } catch (verificationError: any) {
      console.error('‚ùå Erro na verifica√ß√£o de usu√°rio:', verificationError);
      return res.status(500).json({
        success: false,
        error: "Erro ao processar solicita√ß√£o",
      });
    }

    // Gerar token de acesso √∫nico
    const accessToken = crypto.randomBytes(32).toString("hex");
    console.log('üìß Token gerado:', accessToken.substring(0, 8) + '...');

    // Inserir dados na tabela conversions usando Supabase
    console.log('üíæ Inserindo convers√£o via Supabase...');
    
    try {
      const { data: conversion, error: insertError } = await supabase
        .from('conversions')
        .insert([
          {
            name,
            email,
            whatsapp,
            access_token: accessToken,
            status: 'pending'
          } as Partial<ConversionData> // For√ßando a tipagem expl√≠cita como parcial
        ])
        .select() // Garantindo que o retorno seja tipado corretamente
        .single();

      if (insertError) {
        console.error('‚ùå Erro ao inserir convers√£o:', insertError);
        return res.status(500).json({
          success: false,
          error: "Erro ao processar convers√£o",
        });
      }

      console.log('‚úÖ Convers√£o criada com sucesso:', conversion.id);

      // URL de frontend (ajustar conforme ambiente)
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      const redirectUrl = `${frontendUrl}/register?token=${accessToken}`;

      // Retornar sucesso com token de acesso
      res.status(201).json({
        success: true,
        message: "Convers√£o processada com sucesso",
        accessToken,
        redirectUrl,
        conversionId: conversion.id
      });

    } catch (error) {
      console.error('‚ùå Erro ao inserir convers√£o:', error);
      return res.status(500).json({
        success: false,
        error: "Erro ao processar convers√£o",
      });
    }

  } catch (error) {
    console.error('‚ùå Erro no processamento da convers√£o:', error);
    res.status(500).json({
      success: false,
      error: "Erro interno do servidor",
    });
  }
});

/**
 * GET /conversions/:token - Validar token de acesso
 * Usado pela p√°gina de registro para validar o token
 */
router.get('/:token', async (req: Request, res: Response) => {
  try {
    const { token } = req.params;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: "Token n√£o fornecido",
      });
    }

    console.log('üîç Validando token:', token.substring(0, 8) + '...');

    // Buscar convers√£o pelo token usando Supabase
    const { data: conversion, error: findError } = await supabase
      .from('conversions')
      .select('*')
      .eq('access_token', token)
      .eq('status', 'pending')
      .single();

    if (findError || !conversion) {
      console.log('‚ùå Token inv√°lido ou expirado');
      return res.status(404).json({
        success: false,
        error: "Token inv√°lido ou expirado",
      });
    }

    console.log('‚úÖ Token v√°lido para:', conversion.email);

    // Retornar dados da convers√£o (sem token por seguran√ßa)
    res.json({
      success: true,
      conversion: {
        id: conversion.id,
        name: conversion.name,
        email: conversion.email,
        whatsapp: conversion.whatsapp,
        status: conversion.status,
        createdAt: conversion.created_at,
      },
    });

  } catch (error) {
    console.error('‚ùå Erro ao validar token:', error);
    res.status(500).json({
      success: false,
      error: "Erro interno do servidor",
    });
  }
});

/**
 * PATCH /conversions/:token/complete - Marcar convers√£o como conclu√≠da
 * Chamado ap√≥s cria√ß√£o bem-sucedida da conta
 */
router.patch('/:token/complete', async (req: Request, res: Response) => {
  try {
    const { token } = req.params;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: "Token n√£o fornecido",
      });
    }

    console.log('üîÑ Marcando convers√£o como conclu√≠da:', token.substring(0, 8) + '...');

    // Atualizar status da convers√£o usando Supabase
    const { data: conversion, error: updateError } = await supabase
      .from('conversions')
      .update({ status: 'completed' })
      .eq('access_token', token)
      .eq('status', 'pending')
      .select()
      .single();

    if (updateError || !conversion) {
      return res.status(404).json({
        success: false,
        error: "Token inv√°lido ou j√° utilizado",
      });
    }

    console.log('‚úÖ Convers√£o marcada como conclu√≠da');

    res.json({
      success: true,
      message: "Convers√£o marcada como conclu√≠da",
    });

  } catch (error) {
    console.error('‚ùå Erro ao completar convers√£o:', error);
    res.status(500).json({
      success: false,
      error: "Erro interno do servidor",
    });
  }
});

/**
 * POST /conversions/:token/signup - Criar usu√°rio com token v√°lido
 * Cria conta no Supabase sem verifica√ß√£o de email usando Service Role Key
 */
router.post('/:token/signup', async (req: Request, res: Response) => {
  try {
    const { token } = req.params;
    const { password } = req.body;

    console.log('üîê Tentativa de cria√ß√£o de usu√°rio com token:', token?.substring(0, 8) + '...');

    // Valida√ß√£o b√°sica
    if (!password || password.length < 8) {
      return res.status(400).json({
        success: false,
        error: "Senha deve ter pelo menos 8 caracteres",
      });
    }

    // Buscar convers√£o pelo token
    const { data: conversion, error: findError } = await supabase
      .from('conversions')
      .select('*')
      .eq('access_token', token)
      .eq('status', 'pending')
      .single();

    if (findError || !conversion) {
      return res.status(404).json({
        success: false,
        error: "Token inv√°lido ou j√° utilizado",
      });
    }

    console.log('‚úÖ Token v√°lido, criando usu√°rio para:', conversion.email);

    // Criar usu√°rio no Supabase usando Service Role Key (sem verifica√ß√£o de email)
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: conversion.email,
      password: password,
      email_confirm: true, // Marcar email como confirmado
      user_metadata: {
        name: conversion.name,
        whatsapp: conversion.whatsapp,
        conversion_id: conversion.id
      }
    });

    if (authError) {
      console.error('‚ùå Erro ao criar usu√°rio no Supabase:', authError);
      
      // Verificar se √© erro de email j√° existente
      if (authError.message?.toLowerCase().includes('already') || authError.message?.toLowerCase().includes('exists')) {
        return res.status(409).json({
          success: false,
          error: "email_exists",
          message: "Este email j√° possui uma conta cadastrada"
        });
      }
      
      throw authError;
    }

    console.log('‚úÖ Usu√°rio criado com sucesso:', authData.user?.id);

    // Marcar convers√£o como conclu√≠da
    await supabase
      .from('conversions')
      .update({ status: 'completed' })
      .eq('id', conversion.id);

    res.json({
      success: true,
      message: "Usu√°rio criado com sucesso",
      user: {
        id: authData.user?.id,
        email: authData.user?.email,
        name: conversion.name
      }
    });

  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error);
    res.status(500).json({
      success: false,
      error: "Erro interno do servidor",
    });
  }
});

export default router;
