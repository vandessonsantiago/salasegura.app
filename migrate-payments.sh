#!/bin/bash

# üöÄ SCRIPT DE MIGRA√á√ÉO AUTOMATIZADA - M√ìDULO PAYMENTS
# Data: 01 de setembro de 2025
# Vers√£o: 1.0

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
check_directory() {
    if [ ! -f "package.json" ] || [ ! -d "apps/api/src" ]; then
        error "Diret√≥rio incorreto. Execute este script na raiz do projeto."
        exit 1
    fi
    success "Diret√≥rio correto detectado"
}

# Backup dos arquivos originais
backup_files() {
    log "Criando backup dos arquivos..."

    mkdir -p backup/payments_migration

    # Arquivos que ser√£o modificados
    files_to_backup=(
        "apps/api/src/services/WebhookService.ts"
        "apps/api/src/agendamentos/services/AgendamentoService.ts"
        "apps/api/src/routes/checkout.ts"
        "apps/api/src/routes/index.ts"
        "apps/api/src/app.ts"
    )

    for file in "${files_to_backup[@]}"; do
        if [ -f "$file" ]; then
            cp "$file" "backup/payments_migration/$(basename "$file" .ts)_backup.ts"
            success "Backup criado: $file"
        else
            warning "Arquivo n√£o encontrado: $file"
        fi
    done
}

# Atualizar imports no WebhookService
update_webhook_service() {
    log "Atualizando WebhookService.ts..."

    file="apps/api/src/services/WebhookService.ts"

    if [ ! -f "$file" ]; then
        warning "Arquivo WebhookService.ts n√£o encontrado, pulando..."
        return
    fi

    # Atualizar import
    sed -i.bak 's|import { PaymentService } from '\''./PaymentService'\'';|import { PaymentService } from '\''../payments/services/PaymentService'\'';|g' "$file"

    success "WebhookService.ts atualizado"
}

# Atualizar imports no AgendamentoService
update_agendamento_service() {
    log "Atualizando AgendamentoService.ts..."

    file="apps/api/src/agendamentos/services/AgendamentoService.ts"

    if [ ! -f "$file" ]; then
        warning "Arquivo AgendamentoService.ts n√£o encontrado, pulando..."
        return
    fi

    # Atualizar import
    sed -i.bak 's|import { PaymentService } from '\''../../services/PaymentService'\'';|import { PaymentService } from '\''../../payments/services/PaymentService'\'';|g' "$file"

    success "AgendamentoService.ts atualizado"
}

# Atualizar imports nas rotas de checkout
update_checkout_routes() {
    log "Atualizando checkout.ts routes..."

    file="apps/api/src/routes/checkout.ts"

    if [ ! -f "$file" ]; then
        warning "Arquivo checkout.ts n√£o encontrado, pulando..."
        return
    fi

    # Atualizar import
    sed -i.bak 's|import { CheckoutService } from '\''../services/CheckoutService'\'';|import { CheckoutService } from '\''../payments/services/CheckoutService'\'';|g' "$file"

    success "checkout.ts atualizado"
}

# Registrar novas rotas
update_routes_index() {
    log "Atualizando routes/index.ts..."

    file="apps/api/src/routes/index.ts"

    if [ ! -f "$file" ]; then
        warning "Arquivo routes/index.ts n√£o encontrado, pulando..."
        return
    fi

    # Adicionar import do PaymentRoutes
    if ! grep -q "PaymentRoutes" "$file"; then
        sed -i.bak 's|import { DivorceRoutes } from "../divorce";|import { DivorceRoutes } from "../divorce";\nimport { PaymentRoutes } from "../payments";|g' "$file"
        success "Import PaymentRoutes adicionado"
    else
        success "Import PaymentRoutes j√° existe"
    fi

    # Registrar rota
    if ! grep -q "PaymentRoutes" "$file"; then
        sed -i.bak 's|router.use("/divorcio", DivorceRoutes);|router.use("/divorcio", DivorceRoutes);\nrouter.use("/payments", PaymentRoutes);|g' "$file"
        success "Rota /payments registrada"
    else
        success "Rota /payments j√° registrada"
    fi
}

# Verificar build
check_build() {
    log "Verificando build..."

    cd apps/api

    if npm run build 2>/dev/null; then
        success "Build passou com sucesso!"
        cd ../..
        return 0
    else
        error "Build falhou! Verifique os erros acima."
        cd ../..
        return 1
    fi
}

# Testes b√°sicos
run_basic_tests() {
    log "Executando testes b√°sicos..."

    # Verificar se os m√≥dulos podem ser importados
    node -e "
    try {
        const { PaymentService } = require('./apps/api/src/payments');
        const { CheckoutService } = require('./apps/api/src/payments');
        const { AsaasService } = require('./apps/api/src/payments');
        console.log('‚úÖ Todos os m√≥dulos podem ser importados');
    } catch (error) {
        console.error('‚ùå Erro ao importar m√≥dulos:', error.message);
        process.exit(1);
    }
    "

    if [ $? -eq 0 ]; then
        success "Testes b√°sicos passaram!"
    else
        error "Testes b√°sicos falharam!"
        return 1
    fi
}

# Menu principal
show_menu() {
    echo
    echo "========================================"
    echo "üöÄ MIGRA√á√ÉO M√ìDULO PAYMENTS"
    echo "========================================"
    echo
    echo "Escolha uma op√ß√£o:"
    echo "1) Executar migra√ß√£o completa"
    echo "2) Apenas atualizar imports"
    echo "3) Apenas verificar build"
    echo "4) Criar backup"
    echo "5) Sair"
    echo
    read -p "Op√ß√£o: " choice
}

# Migra√ß√£o completa
full_migration() {
    log "üöÄ INICIANDO MIGRA√á√ÉO COMPLETA"

    check_directory
    backup_files
    update_webhook_service
    update_agendamento_service
    update_checkout_routes
    update_routes_index

    echo
    if check_build && run_basic_tests; then
        success "üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!"
        echo
        warning "üìã PR√ìXIMOS PASSOS:"
        echo "1. Teste as funcionalidades cr√≠ticas manualmente"
        echo "2. Execute os testes de integra√ß√£o"
        echo "3. Fa√ßa deploy em staging"
        echo "4. Monitore por 24h antes do deploy em produ√ß√£o"
    else
        error "‚ùå MIGRA√á√ÉO FALHOU! Verifique os erros acima."
        echo
        warning "üîÑ PARA FAZER ROLLBACK:"
        echo "1. Execute: git checkout HEAD~1"
        echo "2. Ou restaure os arquivos do diret√≥rio backup/"
    fi
}

# Apenas atualizar imports
update_imports_only() {
    log "üîÑ ATUALIZANDO APENAS IMPORTS"

    check_directory
    backup_files
    update_webhook_service
    update_agendamento_service
    update_checkout_routes

    if check_build; then
        success "‚úÖ Imports atualizados com sucesso!"
    else
        error "‚ùå Erro ao atualizar imports!"
    fi
}

# Apenas verificar build
build_only() {
    log "üîç VERIFICANDO BUILD"

    check_directory

    if check_build; then
        success "‚úÖ Build est√° funcionando!"
    else
        error "‚ùå Build com problemas!"
    fi
}

# Apenas backup
backup_only() {
    log "üì¶ CRIANDO BACKUP"

    check_directory
    backup_files
    success "‚úÖ Backup criado em backup/payments_migration/"
}

# Loop principal
while true; do
    show_menu

    case $choice in
        1)
            full_migration
            break
            ;;
        2)
            update_imports_only
            ;;
        3)
            build_only
            ;;
        4)
            backup_only
            ;;
        5)
            log "Saindo..."
            exit 0
            ;;
        *)
            error "Op√ß√£o inv√°lida!"
            ;;
    esac

    echo
    read -p "Pressione Enter para continuar..."
done
