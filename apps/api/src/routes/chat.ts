import express, { Router } from 'express';
import OpenAI from 'openai';
import { ChatController } from '../controllers/ChatController';
import { authenticateToken } from '../middleware/auth';
import { supabaseAdmin as supabase } from '../lib/supabase';

const router: Router = express.Router();

// Inicializar OpenAI com valida√ß√£o
let openai: OpenAI | null = null;

try {
  const apiKey = process.env.OPENAI_API_KEY;
  if (apiKey && apiKey.length > 20 && apiKey.startsWith('sk-')) {
    openai = new OpenAI({
      apiKey: apiKey,
    });
    console.log('‚úÖ OpenAI inicializado com sucesso');
  } else {
    console.warn('‚ö†Ô∏è Chave da API OpenAI n√£o configurada ou inv√°lida');
  }
} catch (error) {
  console.error('‚ùå Erro ao inicializar OpenAI:', error);
}

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface ChatRequest {
  message: string;
  chatHistory: ChatMessage[];
}

interface ConversionData {
  shouldConvert: boolean;
  contactData: {
    email: string;
    whatsapp: string;
  };
  timestamp?: string;
}

// Sistema de contexto para o advogado
const systemPromptPt = `Voc√™ √© o advogado Vandesson Santiago, especialista em Direito de Fam√≠lia.

CREDENCIAIS: OAB/AM 12.217 - OA/PT 64171P

FORMATA√á√ÉO DAS RESPOSTAS:
- Use **negrito** para destacar informa√ß√µes importantes
- Use *it√°lico* para √™nfase ou dicas importantes
- Use listas com ‚Ä¢ para organizar informa√ß√µes
- Destaque **documentos**, **prazos** e **valores** importantes
- Mantenha formata√ß√£o limpa e profissional

REGRAS FUNDAMENTAIS:
1. Mantenha tom calmo, respeitoso e emp√°tico
2. Use vocabul√°rio simples, evitando juridiqu√™s
3. NUNCA incentive separa√ß√£o; atenda apenas quem j√° decidiu
4. N√ÉO tome partido nem fa√ßa julgamentos morais
5. Trate todas as informa√ß√µes como confidenciais
6. N√ÉO mencione M√©todo Novo Pacto ou Sala Segura no primeiro contato

SENSIBILIDADE E EMPATIA:
- NUNCA comemore, celebre ou demonstre alegria pela decis√£o de separa√ß√£o
- NUNCA use frases como "√≥timo", "perfeito", "fico feliz" em rela√ß√£o ao div√≥rcio
- SEMPRE demonstre compreens√£o e respeito pela complexidade emocional do momento
- Use linguagem neutra e profissional, mas acolhedora
- Reconhe√ßa que este √© um momento dif√≠cil e delicado
- Ofere√ßa apoio e orienta√ß√£o de forma respeitosa

PRIMEIRA INTERA√á√ÉO (ACOLHIMENTO):
- Cumprimente de forma acolhedora
- Confirme que entende que a decis√£o j√° foi tomada
- Fa√ßa apenas 2 perguntas essenciais:
  * Tipo de v√≠nculo (casamento ou uni√£o est√°vel)
  * Se h√° filhos menores envolvidos
- N√ÉO pergunte cidade/estado (direito √© o mesmo em todo Brasil)
- N√ÉO mencione m√©todos, plataformas ou servi√ßos
- Foque apenas em acolher e entender a situa√ß√£o b√°sica

SEGUNDA INTERA√á√ÉO (APRESENTA√á√ÉO DA SALA SEGURA):
- Agrade√ßa pelas informa√ß√µes compartilhadas
- Confirme que entende a situa√ß√£o (especialmente se h√° filhos menores)
- SEMPRE apresente a Sala Segura como solu√ß√£o natural:
  * "Para ajud√°-lo de forma mais organizada, temos a Sala Segura"
  * "√â um espa√ßo onde voc√™ pode organizar todo o processo"
  * "Inclui checklist, documentos, acordos e acompanhamento"
  * "O acesso √© gratuito e voc√™ s√≥ paga pelos servi√ßos que precisar"
- SEMPRE direcione para o formul√°rio de acesso
- N√ÉO pergunte "como voc√™ prefere seguir" - seja direto

PERGUNTAS PERMITIDAS:
- Tipo de v√≠nculo (casamento/uni√£o est√°vel)
- Exist√™ncia de filhos menores

PERGUNTAS PROIBIDAS:
- Motivo da separa√ß√£o
- Julgamentos morais
- Quest√µes que incentivem conflito
- Cidade e estado de resid√™ncia
- Mencionar M√©todo Novo Pacto ou Sala Segura

RESPONDA de forma acolhedora e profissional, sem mencionar produtos ou servi√ßos no primeiro contato.`;

/**
 * Detectar inten√ß√£o de convers√£o baseada na mensagem e hist√≥rico
 */
function detectConversionIntent(
  message: string,
  chatHistory: ChatMessage[]
): ConversionData {
  console.log('üîç Debug detectConversionIntent:', {
    message,
    chatHistoryLength: chatHistory.length,
    chatHistory: chatHistory.map((msg) => ({
      type: msg.type,
      content: msg.content.substring(0, 50),
    })),
  });

  // Se √© a primeira mensagem, N√ÉO detectar convers√£o
  if (chatHistory.length === 0) {
    console.log('‚ùå Primeira mensagem - n√£o detectar convers√£o');
    return {
      shouldConvert: false,
      contactData: { email: '', whatsapp: '' },
    };
  }

  // S√≥ ativar convers√£o ap√≥s duas respostas do usu√°rio (duas perguntas iniciais respondidas)
  if (chatHistory.length >= 2) {
    console.log('‚úÖ Convers√£o ativada ap√≥s duas respostas iniciais');
    return {
      shouldConvert: true,
      contactData: { email: '', whatsapp: '' },
      timestamp: new Date().toISOString(),
    };
  }

  const conversionKeywords = [
    'sala segura',
    'acesso',
    'link',
    'plataforma',
    'm√©todo',
    'novo pacto',
    'quero come√ßar',
    'vamos come√ßar',
    'iniciar o processo',
    'come√ßar o processo',
    'quero agora',
    'j√° estou pronto',
    'pronto para come√ßar',
    'concordo',
    'aceito',
    'quero avan√ßar',
    'formulario',
    'formul√°rio',
    'ir para',
    'onde',
    'quanto custa',
    'valor',
    'pre√ßo',
    'custo',
    'gratuito',
    'gratis',
    'quanto tempo',
    'prazo',
    'quando',
    'pr√≥ximo passo',
    'como fazer',
  ];

  const messageLower = message.toLowerCase();
  const matchedKeywords = conversionKeywords.filter((keyword) =>
    messageLower.includes(keyword)
  );

  const result = matchedKeywords.length > 0 && chatHistory.length >= 1;
  console.log('üîç Resultado detec√ß√£o:', { matchedKeywords, result });

  return {
    shouldConvert: result,
    contactData: { email: '', whatsapp: '' },
    timestamp: result ? new Date().toISOString() : undefined,
  };
}

/**
 * Extrair dados de contato da mensagem
 */
function extractContactData(message: string): {
  email: string;
  whatsapp: string;
} {
  const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/;
  const whatsappRegex = /(\+55\s?)?(\d{2}\s?)?(\d{4,5}\s?)?(\d{4})/;

  const email = message.match(emailRegex)?.[0] || '';
  const whatsapp = message.match(whatsappRegex)?.[0] || '';

  return { email, whatsapp };
}

/**
 * Construir mensagens para o OpenAI
 */
function buildMessages(request: ChatRequest): any[] {
  const systemPrompt = systemPromptPt;

  const messages: any[] = [
    {
      role: 'system',
      content: systemPrompt,
    },
  ];

  // Adicionar hist√≥rico de conversa
  request.chatHistory.forEach((msg) => {
    messages.push({
      role: msg.type === 'user' ? 'user' : 'assistant',
      content: msg.content,
    });
  });

  // Adicionar mensagem atual
  messages.push({
    role: 'user',
    content: request.message,
  });

  return messages;
}

/**
 * POST /api/chat - Processar mensagem do chat
 */
router.post('/', async (req, res) => {
  try {
    const { message, chatHistory = [], conversationId }: ChatRequest & { conversationId?: string } = req.body;

    console.log('üìù Recebida mensagem:', {
      message,
      chatHistoryLength: chatHistory.length,
      conversationId,
    });

    // Verificar se o usu√°rio est√° autenticado
    const authHeader = req.headers?.authorization;
    const isAuthenticatedRequest = !!authHeader && authHeader.startsWith('Bearer ');

    let userId = null;
    let currentConversationId = conversationId;

    // Se autenticado, extrair userId do token e gerenciar conversa
    if (isAuthenticatedRequest) {
      try {
        const token = authHeader.replace('Bearer ', '');
        const { data: { user }, error } = await supabase.auth.getUser(token);
        if (error || !user) {
          console.warn('‚ö†Ô∏è Token inv√°lido para usu√°rio autenticado');
        } else {
          userId = user.id;
          console.log('üîí Usu√°rio autenticado:', userId);

          // Se n√£o h√° conversationId, buscar ou criar uma conversa ativa
          if (!currentConversationId) {
            const { data: conversations } = await supabase
              .from('chat_conversations')
              .select('id')
              .eq('user_id', userId)
              .order('updated_at', { ascending: false })
              .limit(1);

            if (conversations && conversations.length > 0) {
              currentConversationId = conversations[0].id;
              console.log('üìÇ Usando conversa existente:', currentConversationId);
            } else {
              // Criar nova conversa
              const { data: newConversation, error: createError } = await supabase
                .from('chat_conversations')
                .insert({
                  user_id: userId,
                  title: `Conversa ${new Date().toLocaleDateString('pt-BR')}`
                })
                .select('id')
                .single();

              if (createError) {
                console.error('‚ùå Erro ao criar conversa:', createError);
              } else {
                currentConversationId = newConversation.id;
                console.log('üìÇ Nova conversa criada:', currentConversationId);
              }
            }
          }

          // Remover salvamento autom√°tico da mensagem do usu√°rio
          // O ChatContainer cuidar√° disso para evitar duplica√ß√£o
          console.log('ÔøΩ Mensagem do usu√°rio ser√° salva pelo ChatContainer no frontend');
        }
      } catch (authError) {
        console.error('‚ùå Erro na autentica√ß√£o:', authError);
        userId = null;
      }
    }

    // Declarar vari√°vel finalResponse
    let finalResponse: string;
    let completion: any = null;
    const shouldConvert = isAuthenticatedRequest ? { shouldConvert: false, contactData: { email: '', whatsapp: '' } } : detectConversionIntent(message, chatHistory);
    const contactData = extractContactData(message);

    // Adicionando logs detalhados para diagn√≥stico
    console.log('üîç Diagn√≥stico de Requisi√ß√£o:', {
      isAuthenticatedRequest,
      message,
      chatHistoryLength: chatHistory.length,
    });

    if (!isAuthenticatedRequest) {
      const conversionIntent = detectConversionIntent(message, chatHistory);
      console.log('üîç Resultado de detectConversionIntent:', conversionIntent);
    } else {
      console.log('üîí Requisi√ß√£o autenticada - ignorando detec√ß√£o de convers√£o');
    }

    // Validando resultado de shouldConvert
    console.log('üîç Estado de shouldConvert:', shouldConvert);

    // Construir mensagens para OpenAI
    const messages = buildMessages({ message, chatHistory });

    // Ajustando l√≥gica para usar OpenAI com prompts espec√≠ficos para cada contexto
    let openAIPrompt;

    if (!isAuthenticatedRequest) {
      console.log('üîì Requisi√ß√£o n√£o autenticada - ajustando prompt para convers√£o');
      openAIPrompt = `Voc√™ √© um assistente especializado em guiar usu√°rios para convers√µes. Responda de forma acolhedora e incentive o preenchimento do formul√°rio para que possamos oferecer suporte adequado. Mensagem do usu√°rio: "${message}"`;
    } else {
      console.log('üîí Requisi√ß√£o autenticada - ajustando prompt para contexto jur√≠dico');
      openAIPrompt = `Voc√™ √© um assistente jur√≠dico especializado em direito de fam√≠lia. Responda de forma t√©cnica e clara √†s quest√µes apresentadas pelo usu√°rio. Mensagem do usu√°rio: "${message}"`;
    }

    console.log('ü§ñ Chamando OpenAI com prompt:', openAIPrompt);

    // Verificar se OpenAI est√° dispon√≠vel
    if (!openai) {
      console.warn('‚ö†Ô∏è OpenAI n√£o dispon√≠vel, usando resposta de fallback');
      finalResponse = 'Ol√°! Sou o advogado Vandesson Santiago, especialista em direito de fam√≠lia. Como posso ajudar com sua quest√£o jur√≠dica hoje?';
    } else {
      try {
        // Chamar API da OpenAI com o prompt ajustado
        const completion = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'system', content: openAIPrompt }],
          max_tokens: 400,
          temperature: 0.6,
        });

        finalResponse =
          completion.choices[0]?.message?.content ||
          'Desculpe, n√£o consegui processar sua mensagem.';

        console.log('‚úÖ Resposta da OpenAI:', finalResponse.substring(0, 100) + '...');
      } catch (error: any) {
        console.error('‚ùå Erro na API OpenAI:', error.message);

        // Tratamento espec√≠fico para erro de API key
        if (error.status === 401 || error.code === 'invalid_api_key') {
          console.error('üîë Chave da API OpenAI inv√°lida ou expirada');
          finalResponse = 'Ol√°! Sou o advogado Vandesson Santiago, especialista em direito de fam√≠lia. No momento, estou com uma dificuldade t√©cnica, mas posso ajudar com quest√µes b√°sicas sobre div√≥rcio, guarda de filhos e pens√£o aliment√≠cia. Que d√∫vida voc√™ tem?';
        } else {
          finalResponse = 'Ol√°! Sou o advogado Vandesson Santiago, especialista em direito de fam√≠lia. Como posso ajudar com sua quest√£o jur√≠dica hoje?';
        }
      }
    }

    // Adicionando l√≥gica para identificar mensagens que precisam de respostas jur√≠dicas
    const isLegalContext = (message: string): boolean => {
      const legalKeywords = ['div√≥rcio', 'alimentos', 'direito de fam√≠lia', 'guarda', 'pens√£o'];
      return legalKeywords.some((keyword) => message.toLowerCase().includes(keyword));
    };

    // Verificar se a mensagem √© de contexto jur√≠dico
    const isLegalMessage = isLegalContext(message);

    // Ajustando l√≥gica para priorizar convers√£o em chats n√£o autenticados
    if (!isAuthenticatedRequest) {
      console.log('üîì Requisi√ß√£o n√£o autenticada - restaurando fluxo de convers√£o');

      const conversionResponse = await detectConversionIntent(message, chatHistory);

      if (conversionResponse.shouldConvert) {
        console.log('üéØ Fluxo de convers√£o acionado');
        finalResponse = `Entendemos que este √© um momento importante para voc√™. Para ajudar, criamos um espa√ßo digital chamado Sala Segura, onde voc√™ pode organizar e simplificar processos relacionados √† sua situa√ß√£o. Por favor, preencha o formul√°rio que aparecer√° em seguida para que possamos oferecer o suporte necess√°rio.`;
      } else {
        console.log('üîÑ Mensagem gen√©rica - chamando OpenAI para resposta ajustada');
        if (!openai) {
          console.warn('‚ö†Ô∏è OpenAI n√£o dispon√≠vel, usando resposta de fallback');
          finalResponse = 'Ol√°! Sou o advogado Vandesson Santiago, especialista em direito de fam√≠lia. Como posso ajudar com sua quest√£o jur√≠dica hoje?';
        } else {
          const completion = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [{ role: 'system', content: `Voc√™ √© um assistente especializado em guiar usu√°rios para convers√µes. Responda de forma acolhedora e incentive o preenchimento do formul√°rio. Mensagem do usu√°rio: "${message}"` }],
            max_tokens: 400,
            temperature: 0.6,
          });

          finalResponse =
            completion.choices[0]?.message?.content ||
            'Desculpe, n√£o consegui processar sua mensagem.';
        }
      }
    } else if (isAuthenticatedRequest) {
      console.log('üîí Requisi√ß√£o autenticada - verificando contexto da mensagem');

      if (message.toLowerCase().includes('como essa p√°gina pode me ajudar')) {
        console.log('‚öñÔ∏è Mensagem gen√©rica identificada - fornecendo contexto jur√≠dico');
        finalResponse = `Este √© um assistente jur√≠dico especializado em direito de fam√≠lia. Estou aqui para ajudar com quest√µes relacionadas a div√≥rcio, guarda de filhos, pens√£o aliment√≠cia e outros temas jur√≠dicos. Por favor, me diga como posso ajudar.`;
      } else if (isLegalMessage) {
        console.log('‚öñÔ∏è Mensagem identificada como contexto jur√≠dico');
        finalResponse = `Este √© um assistente jur√≠dico especializado em direito de fam√≠lia. Estou aqui para ajudar com quest√µes relacionadas a div√≥rcio, guarda de filhos, pens√£o aliment√≠cia e outros temas jur√≠dicos. Por favor, me diga como posso ajudar.`;
      } else {
        console.log('‚ùå N√£o detectou convers√£o, usando resposta da OpenAI');
        // ...existing OpenAI response logic...
      }
    }

    // Restaurando fluxo de qualifica√ß√£o e apresenta√ß√£o para chat n√£o autenticado
    if (!isAuthenticatedRequest) {
      console.log('üîì Requisi√ß√£o n√£o autenticada - iniciando fluxo de qualifica√ß√£o');

      const qualificationQuestions = [
        'Qual √© o tipo de v√≠nculo que voc√™ possui (casamento ou uni√£o est√°vel)?',
        'Existem filhos menores envolvidos?'
      ];

      if (chatHistory.length < qualificationQuestions.length) {
        finalResponse = qualificationQuestions[chatHistory.length];
      } else {
        console.log('üéØ Qualifica√ß√£o conclu√≠da - apresentando aplica√ß√£o');
        finalResponse = `Entendemos que este √© um momento importante para voc√™. Para ajudar, criamos um espa√ßo digital chamado Sala Segura, onde voc√™ pode organizar e simplificar processos relacionados √† sua situa√ß√£o. Por favor, preencha o formul√°rio que aparecer√° em seguida para que possamos oferecer o suporte necess√°rio.`;

        // Simulando envio do formul√°rio no chat
        // Ajustando o tipo do formul√°rio para corresponder √† interface ChatMessage
        const formMessage: ChatMessage = {
          id: Date.now().toString(),
          content: 'Aqui est√° o formul√°rio de acesso: [Formul√°rio de Acesso](#)',
          type: 'assistant', // Corrigido para usar apenas propriedades v√°lidas
          timestamp: new Date()
        };
        chatHistory.push(formMessage);
      }
    } else if (isAuthenticatedRequest) {
      console.log('üîí Requisi√ß√£o autenticada - verificando contexto da mensagem');

      if (message.toLowerCase().includes('como essa p√°gina pode me ajudar')) {
        console.log('‚öñÔ∏è Mensagem gen√©rica identificada - fornecendo contexto jur√≠dico');
        finalResponse = `Este √© um assistente jur√≠dico especializado em direito de fam√≠lia. Estou aqui para ajudar com quest√µes relacionadas a div√≥rcio, guarda de filhos, pens√£o aliment√≠cia e outros temas jur√≠dicos. Por favor, me diga como posso ajudar.`;
      } else if (isLegalMessage) {
        console.log('‚öñÔ∏è Mensagem identificada como contexto jur√≠dico');
        finalResponse = `Este √© um assistente jur√≠dico especializado em direito de fam√≠lia. Estou aqui para ajudar com quest√µes relacionadas a div√≥rcio, guarda de filhos, pens√£o aliment√≠cia e outros temas jur√≠dicos. Por favor, me diga como posso ajudar.`;
      } else {
        console.log('‚ùå N√£o detectou convers√£o, usando resposta da OpenAI');
        // ...existing OpenAI response logic...
      }
    }

    // Adicionando log para verificar resposta final
    console.log('üì§ Resposta final gerada:', {
      finalResponse: finalResponse.substring(0, 100), // Limitar tamanho do log
      shouldConvert: shouldConvert.shouldConvert,
      conversionData: shouldConvert.shouldConvert ? contactData : null,
    });

    const responseData = {
      response: finalResponse,
      usage: completion?.usage || { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 },
      conversionData: shouldConvert.shouldConvert
        ? {
            shouldConvert: true,
            contactData,
            timestamp: new Date().toISOString(),
          }
        : null,
      conversationId: currentConversationId, // Incluir ID da conversa na resposta
    };

    // Remover salvamento autom√°tico da resposta do assistente
    // O ChatContainer cuidar√° disso para evitar duplica√ß√£o
    console.log('ÔøΩ Resposta gerada, ChatContainer salvar√° no frontend');

    console.log('üì§ Enviando resposta:', {
      responseLength: finalResponse.length,
      shouldConvert: shouldConvert.shouldConvert,
      usage: completion?.usage || { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 },
    });

    res.json(responseData);
  } catch (error) {
    console.error('‚ùå Erro na API:', error);

    res.status(500).json({
      response:
        'Desculpe, estou enfrentando uma dificuldade t√©cnica no momento. Por favor, tente novamente em alguns instantes.',
      usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 },
      conversionData: null,
      error: error instanceof Error ? error.message : 'Erro desconhecido',
    });
  }
});

/**
 * GET /api/chat - Status da API de chat
 */
router.get('/', (req, res) => {
  res.json({
    status: 'active',
    service: 'Sala Segura Chat API',
    features: [
      'Integra√ß√£o com OpenAI GPT-4o-mini',
      'Detec√ß√£o de inten√ß√£o de convers√£o',
      'Suporte em portugu√™s (PT-BR)',
      'Contexto de advogado especialista',
      'Metodologia Novo Pacto',
      'Sistema de contexto completo',
      'Respostas espec√≠ficas para Sala Segura',
    ],
    timestamp: new Date().toISOString(),
  });
});

// Rotas REST para chat autenticado
router.get('/conversations', authenticateToken, ChatController.getUserConversations);
router.post('/conversations', authenticateToken, ChatController.createConversation);
router.get('/conversations/:id/messages', authenticateToken, ChatController.getConversationMessages);
router.post('/conversations/:id/messages', authenticateToken, ChatController.addMessage);
router.delete('/conversations/:id', authenticateToken, ChatController.deleteConversation);
router.delete('/conversations', authenticateToken, ChatController.deleteAllUserConversations);

export default router;
